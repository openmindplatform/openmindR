tlab_text <- basicsummarystats %>%
filter(variable_code == 'Q16', moderates == 'WithoutModerates') %>%
pull(tlab)
cohend_text <- basicsummarystats %>%
filter(variable_code == 'Q16', moderates == 'WithoutModerates') %>%
pull(cohend) %>%
round(2)
html_text <- HTML(glue("<b>Liking for Outgroup</b><br><br>For this analysis, we determined 'outgroup' by matching people's political identity with the survey questions asking how much they liked people with the same and different political identity. Specifically, if someone identified as liberal, their outgroup liking score was how much they liked conservatives. If someone identified as conservative, their outgroup liking score was how much they liked liberals.<br><br>We found that {perc}% of users liked the political group more (or, disliked them less) after completing OpenMind. Moreover, this improvement was statistically significant, {tlab_text}, Cohen's d = {cohend_text}."))
}
if (type == "Intellectual Humility") {
perc <- basicsummarystats %>%
filter(variable_code == 'Q18', moderates == 'WithModerates') %>%
pull(percentimproved)
tlab_text <- basicsummarystats %>%
filter(variable_code == 'Q18', moderates == 'WithModerates') %>%
pull(tlab)
cohend_text <- basicsummarystats %>%
filter(variable_code == 'Q18', moderates == 'WithModerates') %>%
pull(cohend) %>%
round(2)
html_text <- HTML(glue("<b>Intellectual Humility</b><br><br>For this analysis, we computed the average score of the four survey questions assessing intellectual humility.<br><br>We found that {perc}% of users were more intellectually humble after completing OpenMind. Moreover, this improvement was statistically significant, {tlab_text}, Cohen's d = {cohend_text}."))
}
if (type == "Perspective-Taking") {
perc <- basicsummarystats %>%
filter(variable_code == 'Q4', moderates == 'WithModerates') %>%
pull(percentimproved)
tlab_text <- basicsummarystats %>%
filter(variable_code == 'Q4', moderates == 'WithModerates') %>%
pull(tlab)
cohend_text <- basicsummarystats %>%
filter(variable_code == 'Q4', moderates == 'WithModerates') %>%
pull(cohend) %>%
round(2)
html_text <- HTML(glue("<b>Perspective-Taking</b><br><br>We found that {perc}% of users scored higher on perspective-taking after completing OpenMind. Moreover, this improvement was statistically significant, {tlab_text}, Cohen's d = {cohend_text}."))
}
if (type == "Respectful Disagreement in Class") {
perc <- basicsummarystats %>%
filter(variable_code == 'C3', moderates == 'WithModerates') %>%
pull(percentimproved)
tlab_text <- basicsummarystats %>%
filter(variable_code == 'C3', moderates == 'WithModerates') %>%
pull(tlab)
cohend_text <- basicsummarystats %>%
filter(variable_code == 'C3', moderates == 'WithModerates') %>%
pull(cohend) %>%
round(2)
html_text <- HTML(glue("<b>Classroom Freedom of Expression</b><br><br>We found that {perc}% of users felt freer to express their beliefs in class after completing OpenMind. Moreover, this improvement was statistically significant, {tlab_text}, Cohen's d = {cohend_text}."))
}
if (type == "Growth Mindset") {
perc <- basicsummarystats %>%
filter(variable_code == 'Q11', moderates == 'WithModerates') %>%
pull(percentimproved)
tlab_text <- basicsummarystats %>%
filter(variable_code == 'Q11', moderates == 'WithModerates') %>%
pull(tlab)
cohend_text <- basicsummarystats %>%
filter(variable_code == 'Q11', moderates == 'WithModerates') %>%
pull(cohend) %>%
round(2)
html_text <- HTML(glue("<b>Growth Mindset</b><br><br>We found that {perc}% of users scored higher on Growth Mindset after completing OpenMind. Moreover, this improvement was statistically significant, {tlab_text}, Cohen's d = {cohend_text}."))
}
return(html_text)
}
renderUI({print_description(input$pol_polar)})
# Chunk 18
int_table <- basicsummarystats %>%
mutate_if(is.numeric, ~round(.x, 2)) %>%
select(variable_code, everything(), -tlab, -moderates)
DT::datatable(int_table)
# would be nice to be able to sort this table
# Chunk 19
Q2_dat <- gt_parsed_feedback %>%
mutate(AccessCode = as.factor(AccessCode)) %>%
mutate(UserType = as.character(UserType)) %>%
mutate(UserType = ifelse(AccessCode == "IndividualUser", "IndividualUser", UserType)) %>%
select(Step1_Q2, Step2_Q2, Step3_Q2, Step4_Q2, Step5_Q2, AppRating, UserType) %>%
mutate_at(vars(Step1_Q2:Step5_Q2), as.numeric) #%>%
Q2_plot_dat <- left_join(
Q2_dat %>%
dplyr::group_by(UserType) %>%
summarise_all(~mean(.x, na.rm = T)) %>%
gather(key, mean, -UserType),
Q2_dat %>%
dplyr::group_by(UserType) %>%
summarise_all(~sd(.x, na.rm = T)) %>%
gather(key, sd, -UserType)
) %>%
drop_na(UserType) %>%
mutate(sd = ifelse(is.na(sd), 0, sd)) %>%
mutate(key = case_when(
key == "Step1_Q2" ~ "Step 1",
key == "Step2_Q2" ~ "Step 2",
key == "Step3_Q2" ~ "Step 3",
key == "Step4_Q2" ~ "Step 4",
key == "Step5_Q2" ~ "Step 5",
key == "AppRating" ~ "OpenMind Rating"
))%>%
mutate(UserType = case_when(
UserType == "college" ~ "College",
UserType == "corp" ~ "Corporation",
UserType == "highschool" ~ "High School",
UserType == "orgadult" ~ "Adult Organization",
UserType == "orgstudent" ~ "Student Organization",
UserType == "IndividualUser" ~ "Individual User",
)) %>%
mutate(UserType = fct_relevel(UserType, "College",
"Corporation", "High School",
"Adult Organization", "Student Organization",
"Individual User"))
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q2_plot_dat$key)) %>%
hc_add_series(Q2_plot_dat, "column", hcaes(x = key, y = mean, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7))%>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}") %>%
hc_title(
text = "Average Rating by Step and User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
align = "left",
title = list(text = "Average Rating"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.1f}')
)
) %>%
hc_yAxis(max = 11)
# Chunk 20
Q3_dat <- gt_parsed_feedback %>%
mutate(AccessCode = as.factor(AccessCode)) %>%
mutate(UserType = as.character(UserType)) %>%
mutate(UserType = ifelse(AccessCode == "IndividualUser", "IndividualUser", UserType)) %>%
select(Step1_Q3, Step2_Q3, Step3_Q3, Step4_Q3, Step5_Q3, UserType) %>%
# drop_na(Step1_Q3:Step5_Q3) %>%
mutate_at(vars(Step1_Q3, Step2_Q3, Step3_Q3, Step4_Q3, Step5_Q3), function(x) ifelse(str_detect(x, "Yes|No|Maybe"), x, NA)) %>%
mutate_at(vars(Step1_Q3:Step5_Q3, UserType), as.factor)
Q3_dat_plot <- bind_rows(
Q3_dat %>%
dplyr::count(Step1_Q3, UserType) %>%
mutate(type = "Step1_Q3") %>%
dplyr::rename(Q3 = Step1_Q3) %>%
drop_na(Q3),
Q3_dat %>%
dplyr::count(Step2_Q3, UserType) %>%
mutate(type = "Step2_Q3") %>%
dplyr::rename(Q3 = Step2_Q3) %>%
drop_na(Q3),
Q3_dat %>%
dplyr::count(Step3_Q3, UserType) %>%
mutate(type = "Step3_Q3") %>%
dplyr::rename(Q3 = Step3_Q3) %>%
drop_na(Q3),
Q3_dat %>%
dplyr::count(Step4_Q3, UserType) %>%
mutate(type = "Step4_Q3") %>%
dplyr::rename(Q3 = Step4_Q3) %>%
drop_na(Q3),
Q3_dat %>%
dplyr::count(Step5_Q3, UserType) %>%
mutate(type = "Step5_Q3") %>%
dplyr::rename(Q3 = Step5_Q3) %>%
drop_na(Q3)
) %>%
drop_na(UserType) %>%
mutate(type = as.factor(type)) %>%
dplyr::group_by(UserType, type) %>%
dplyr::mutate(total = sum(n)) %>%
ungroup() %>%
arrange(UserType, type) %>%
mutate(perc = (n / total)*100) %>%
mutate(perc_label = get_percentage(n, total, 2))  %>%
mutate(type = case_when(
type == "Step1_Q3" ~ "Step 1",
type == "Step2_Q3" ~ "Step 2",
type == "Step3_Q3" ~ "Step 3",
type == "Step4_Q3" ~ "Step 4",
type == "Step5_Q3" ~ "Step 5",
))%>%
mutate(UserType = case_when(
UserType == "college" ~ "College",
UserType == "corp" ~ "Corporation",
UserType == "highschool" ~ "High School",
UserType == "orgadult" ~ "Adult Organization",
UserType == "orgstudent" ~ "Student Organization",
UserType == "IndividualUser" ~ "Individual User",
)) %>%
mutate(UserType = fct_relevel(UserType, "College",
"Corporation", "High School",
"Adult Organization", "Student Organization",
"Individual User"))
Q3_dat_plot_Yes <- Q3_dat_plot %>%
filter(Q3 == "Yes")
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q3_dat_plot_Yes$type)) %>%
hc_add_series(Q3_dat_plot_Yes, "column", hcaes(x = UserType, y = perc, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7)) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}%") %>%
hc_title(
text = "Users who would recommend OpenMind by User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
max = 110,
align = "left",
title = list(text = "Percentage"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}%')
)
)
# Chunk 21
Q3_dat_plot_Maybe <- Q3_dat_plot %>%
filter(Q3 == "Maybe")
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q3_dat_plot_Maybe$type)) %>%
hc_add_series(Q3_dat_plot_Maybe, "column", hcaes(x = UserType, y = perc, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7))%>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}%") %>%
hc_title(
text = "Users who would MAYBE recommend OpenMind by User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
max = 110,
align = "left",
title = list(text = "Percentage"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}%')
)
)
# Chunk 22
Q3_dat_plot_No <- Q3_dat_plot %>%
filter(Q3 == "No")
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q3_dat_plot_No$type)) %>%
hc_add_series(Q3_dat_plot_No, "column", hcaes(x = UserType, y = perc, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7))%>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}%") %>%
hc_title(
text = "Users who would NOT recommend OpenMind by User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
max = 110,
align = "left",
title = list(text = "Percentage"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}%')
)
)
# Chunk 23
selectInput("type", label = "AccessCode", choices = c("FreedmanCMUF18", "EddySalemStateUniversityF18t",
"MurraySouthernMethodistUniversityF18", "CohenGeorgiaStateUniversityF18",
"HagerlandUofGothenburgF18", "EddySalemStateUniversityF18p",
"CadiganBostonUniversityF18", "EddySalemStateUniversityF18s",
"EddySalemStateUniversityF18r", "PhillipsPennStateBrandywineF18",
"HollandWorcesterStateU.F18", "CAAPeerTutors2018", "MeelerWinthropF18",
"LiuUWWhitewaterF18", "CassellASUF18", "EddySalemStateUniversityF18",
"lagrandMessiahCollegeF18", "BeckerCommunityCollegeofDenverF18",
"WallstenCSULBF18", "RichardsMidlandCollegeF18", "AmatoBostonUniversityF18",
"SuttonBirminghamSouthernCollegeF18", "GadeAmericanUniversityS19"
))
# Chunk 24
renderHighchart({acc_sankey(dat.acc, dat.ass, input$type)})
# #2a98db
## TODO: Figure out when to use GT Data and Airtable data
## TODO: Add Apprating
library(flexdashboard)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(shiny)
library(tidyverse)
library(pander)
library(effsize)
library(data.table)
library(Rmisc)
library(extrafont)
library(extrafontdb)
library(scales)
library(sjmisc)
library(xts)
library(magrittr)
library(glue)
library(openmindR)
library(tidytemplate)
library(highcharter)
library(lubridate)
library(ggrepel)
library(knitr)
library(plotly)
library(glue)
library(airtabler)
panderOptions('digits', 3)
panderOptions('round', 3)
panderOptions('keep.trailing.zeros', TRUE)
user_followup_assessment <- load_it("../data/user_followup_assessment.Rdata")
gt_parsed_feedback <- load_it("../data/gt_parsed_feedback.Rdata") %>%
mutate_at(vars(Step1_Q2, Step2_Q2, Step3_Q2, Step4_Q2, Step5_Q2), as.numeric)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
dat.acc <- load_it("../data/acc.RData")
dat.par <- load_it("../data/par.RData")
dat.ass <- load_it("../data/ass.RData")
## Matching string for all Q variables
q_strings <- paste0("Q", 1:12, collapse = "|")
## Matching string for all C variables
c_strings <- paste0("C", 1:3, collapse = "|")
# loading and basic cleaning of dataframe
app.dat <- load_it("../data/cleaned_dat.Rdata")
# gathered_dat <- load_it("../data/gathered_dat.Rdata") %>%
#      mutate(variable_code = str_remove(Question, Type))
basicsummarystats <- load_it("../data/basicsummarystats.Rdata")
plot_dat <- load_it("../data/plot_dat.Rdata")
## Matching string for all Q variables
q_strings <- paste0("Q", 1:12, collapse = "|")
prop_miss <- function(data) {
final_dat <- data %>%
select(matches(q_strings)) %>%
# arrange(desc(Q3Followup)) %>%
mutate_at(vars(matches(q_strings)), ~ifelse(is.na(.x), 0, 1)) %>%
# mutate_at(vars(matches(q_strings)), as.factor) %>%
summarise_all(sum) %>% t %>% as.data.frame() %>%
rownames_to_column("variable") %>%
dplyr::rename(ncum = V1) %>%
mutate(n = nrow(data)) %>%
mutate(nmiss = n - ncum) %>%
mutate(propmiss = nmiss / n) %>%
mutate(type = case_when(
str_detect(variable, "Pre") ~ "Pre",
str_detect(variable, "Post") ~ "Post",
str_detect(variable, "Followup") ~ "Followup"
)) %>%
mutate(variable_code = str_remove(variable, type)) %>%
arrange(variable_code, desc(type), nmiss) %>%
group_by(variable_code) %>%
mutate(nmiss_q = sum(nmiss)) %>%
arrange(nmiss_q, parse_number(variable_code)) %>%
ungroup()
return(final_dat)
}
acc_sankey <- function(dat.acc, dat.ass, acccode) {
acc_research <- dat.acc %>%
filter(Research %in% c("FUM", "RCTA")) %>%
mutate(AdminName = str_c(AdminFirstName, " ",AdminLastName)) %>%
select(AdminName, AccessCode, GroupName, AdminEmail, NumberMembers, Research)
ss <- acc_research %>%
inner_join(dat.ass) %>%
filter(AccessCode == acccode)
if (nrow(ss) == 0) {
# return(print("No data for this AccessCode"))
return(renderPrint({ "No data for this AccessCode" }))
}
cum_missing <- prop_miss(ss)
min_miss_var <- cum_missing %>% slice(1) %>% pull(variable_code)
sankey_dat <- get_sankey_dat(ss, min_miss_var)
hchart(sankey_dat, "sankey", hcaes(from = from, to = to, weight = weight)) %>%
hc_exporting(
enabled = TRUE
)  %>%
hc_add_theme(theme_hc_om)  %>%
hc_colors(pal_om(7)) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_title(
text = "Pre- Post- and Follow Up Attrition"
)
}
get_sankey_dat <- function(data, which_var){
# which_var <- "Q1"
which_var <- paste0(which_var, c("P", "F"), collapse = "|")
wanna_keeps <- data %>% select(matches(which_var)) %>% colnames()
sankey_raw <- data %>%
select(OMID, AccessCode, AssessmentsDone, matches(which_var)) %>%
# arrange(desc(Q3Followup)) %>%
mutate_at(vars(matches(which_var)), ~ifelse(is.na(.x), 0, 1)) %>%
mutate_at(vars(matches(which_var)), as.factor) %>%
count_(wanna_keeps) %>%
unite("PrePostFollow", wanna_keeps, sep = "") %>%
filter(#PrePostFollow != "000",
PrePostFollow != "010",
PrePostFollow != "001",
PrePostFollow != "011",
PrePostFollow != "101"
) %>%
mutate(total = sum(n)) %>%
arrange(desc(PrePostFollow)) %>%
mutate(cum_n = cumsum(n)) %>%
mutate(rev_cum_n = rev(cum_n))
if ("000" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "000"))
}
if ("100" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "100", cum_n = sankey_raw$total %>% na.omit %>% extract(1)))
}
if ("111" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "111", cum_n = 0))
}
sankey_dat <- bind_rows(
## Recruited
sankey_raw %>%
filter(PrePostFollow == "000") %>%
mutate(from = "Recruited",
to = "Start",
weight = nrow(data)) %>%
select(from, to, weight),
## Pre
sankey_raw %>%
filter(PrePostFollow == "100") %>%
mutate(from = "Start",
to = "Pre",
weight = cum_n) %>%
select(from, to, weight),
## Post
sankey_raw %>%
filter(PrePostFollow == "110") %>%
mutate(from = "Pre",
to = "Post",
weight = cum_n) %>%
select(from, to, weight),
## Follow Up
sankey_raw %>%
filter(PrePostFollow == "111") %>%
mutate(from = "Post",
to = "Follow Up",
weight = cum_n) %>%
select(from, to, weight) %>%
mutate(weight = sum(weight)) %>%
slice(1)
)
return(sankey_dat)
}
theme_hc_om <- openmindR::get_hc_theme_om()
dat.acc <- load_it("../data/acc.RData")
devtools::install_github("favstats/openmindR")
devtools::install_github("favstats/openmindR")
install.packages("backports")
install.packages("backports")
devtools::install_github("favstats/openmindR")
devtools::install_github("favstats/openmindR")
install.packages("backports")
devtools::install_github("favstats/openmindR")
library(openmindR)
?openmindR::om_clean_par
?openmindR::om_clean_ppol
647/4
161.75*12
