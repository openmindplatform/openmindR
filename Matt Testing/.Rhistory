n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
#can it accept ranges?
n1plusv4<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept multiple values?
n1rangev4<-om_filter_data(dat.ass4,n_assessments=c(1,2),version=4)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18t","EddySalemStateUniversityF18s"),
exact_search=T)
# can it filter down to all access codes by pattern matching?
n1v4<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode="CLP",exact_search = F)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
nNULLv5<-om_filter_data(dat.ass5,version=5)
#can it accept multiple values?
n1rangev5<-om_filter_data(dat.ass5,n_assessments=c(1,2),version=5)
# 5.1
#v5
n1v5.1<-om_filter_data(dat.ass5,n_assessments=1,version=5.1)
n2v5.1<-om_filter_data(dat.ass5,n_assessments=2,version=5.1)
n3v5.1<-om_filter_data(dat.ass5,n_assessments=3,version=5.1)
# calc_correct
calc_correct(dat.par$StepsComplete,dat.par$StepScores,dat.par$StepQuestionTotals)
# spits out a bunch of NAs
# this function should have an argument specifying data frame where those 3 variables are, and convert them to numeric
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores),as.numeric(par$StepQuestionTotals))
clean_par<-om_clean_par(dat.par)
#clean ppol
?om_clean_ppol()
n3v4cleanppol<-om_clean_ppol(n3v4)
table(n2v4cleanppol$ppol_raw)
table(n2v4cleanppol$ppol_num)
table(n2v4cleanppol$ppol)
table(n2v4cleanppol$ppol_cat)
#construct measures
?om_construct_measures
om_construct_measures(n3v4cleanppol)
n3v4constructed<-om_construct_measures(n3v4cleanppol)
summary(n2v4constructed)
summary(n3v4constructed)
n3v4constructedremdups<-remove_dups(n3v4constructed)
n3v4long<-om_gather(n3v4constructedremdups,which_strings=q_c_strings)
om_summarize_comparisons(n3v4long)
om_summarize_comparisons(n3v4long,compare="PrePost")
prepo<-om_summarize_comparisons(n3v4long,compare="PrePost")
prefo<-om_summarize_comparisons(n3v4long,compare="PreFollow")
View(prefo)
View(prepo)
View(prefo)
prefo<-om_summarize_comparisons(n3v4long)
View(prefo)
38*30
58+400+156
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
library(openmindR)
setwd("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/")
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
load("data/acc.RData")
load("data/par.RData")
load("data/ins.RData")
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
load("data/acc.RData")
load("data/par.RData")
om_filter_data(dat.ass4,n_assessments=3,version=4)
load("data/ins.RData")
?om_summ
remove.packages("openmindR")
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
remove.packages("openmindR")
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
.rs.restartR()
remove.packages("openmindR")
.rs.restartR()
devtools::install_github("openmindplatform/openmindR")
.rs.restartR()
library(openmindR)
?om_summarize_comparisons
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
install.packages("RSQLite")
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par(parse_feedback = T)
dat.ass %>%
om_rescale()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par(parse_feedback = T)
om_label_stats(gathered_dat, aversion = "V4")
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_rescale() %>%
om_gather(q_c_strings)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_rescale() %>%
om_clean_ppol() %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
om_label_stats(gathered_dat, aversion = "V4")
load("C:/Users/Matt/Downloads/assessmentv4_codebook.rda")
View(assessmentv4_codebook)
#Read in data
load("data/ass4.RData")
?om_filter_data
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalem",exact_search=F)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4,accesscode="EddySalemStateUniversity",exact_search=F)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4,accesscode="EddySalem",exact_search=F)
n2v4<-om_filter_data(dat.ass4,n_assessments=c(1,2,3),version=4,accesscode="EddySalem",exact_search=F)
clean_par<-om_clean_par(dat.par)
eddy<-om_clean_ppol(n2v4)
eddy<-om_rescale(n2v4)
eddy<-om_clean_ppol(eddy)
eddy<-om_construct_measures(eddy)
eddy<-remove_dups(eddy)
eddylong<-om_gather(eddy)
View(eddylong)
om_summarize_comparisons(eddylong)
eddysummary<-om_summarize_comparisons(eddylong)
View(eddysummary)
eddy$condition <- car::recode(eddy$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
eddylong$condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
View(eddylong)
table(eddylong$condition)
?om_summarize_comparisons
om_label_stats(eddylong, aversion = "V4")
wut<-om_label_stats(eddylong, aversion = "V4")
View(wut)
?om_label_stats
?om_mix_models
om_mix_models(wut)
om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
wut<-om_label_stats(eddylong, aversion = "V4")
om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
View(gm.s)
?om_mix_plot
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
source('C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/R/analysis.R', echo=TRUE)
remove.packages(openmindR)
remove.packages(openmindR)
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
#Read in data
load("data/ass4.RData")
n2v4<-om_filter_data(dat.ass4,n_assessments=c(1,2,3),version=4,accesscode="EddySalem",exact_search=F)
eddy<-om_rescale(n2v4)
eddy<-om_clean_ppol(eddy)
eddy<-om_construct_measures(eddy)
eddy<-remove_dups(eddy)
eddylong<-om_gather(eddy)
eddy$condition <- car::recode(eddy$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
wut<-om_label_stats(eddylong, aversion = "V4")
View(wut)
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
#Read in data
load("data/ass4.RData")
n2v4<-om_filter_data(dat.ass4,n_assessments=c(1,2,3),version=4,accesscode="EddySalem",exact_search=F)
eddy<-om_rescale(n2v4)
eddy<-om_clean_ppol(eddy)
eddy<-om_construct_measures(eddy)
eddy<-remove_dups(eddy)
eddylong<-om_gather(eddy)
eddy$Condition <- car::recode(eddy$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
wut<-om_label_stats(eddylong, aversion = "V4")
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
gm.s$lme_dat
gm.s$ggmod
gm.s$effects_dat
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
#Read in data
load("data/ass4.RData")
eddy<-om_rescale(n2v4)
eddy<-om_clean_ppol(eddy)
eddy<-om_construct_measures(eddy)
eddy<-remove_dups(eddy)
eddylong<-om_gather(eddy)
eddy$Condition <- car::recode(eddy$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
wut<-om_label_stats(eddylong, aversion = "V4")
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
remove.packages(openmindR)
remove.packages("openmindR")
devtools::install_github("openmindplatform/openmindR")
install.packages("TMB",type='source')
install.packages("TMB",type='source')
install.packages("TMB", type = "source")
library(openmindR)
wut<-om_label_stats(eddylong, aversion = "V4")
devtools::install_github("openmindplatform/openmindR")
setwd("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/")
#Read in data
load("data/ass4.RData")
n2v4<-om_filter_data(dat.ass4,n_assessments=c(1,2,3),version=4,accesscode="EddySalem",exact_search=F)
library(openmindR)
n2v4<-om_filter_data(dat.ass4,n_assessments=c(1,2,3),version=4,accesscode="EddySalem",exact_search=F)
eddy<-om_rescale(n2v4)
eddy<-om_clean_ppol(eddy)
eddy<-om_construct_measures(eddy)
eddy<-remove_dups(eddy)
eddylong<-om_gather(eddy)
eddysummary<-om_summarize_comparisons(eddylong)
View(eddysummary)
eddy$Condition <- car::recode(eddy$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
eddylong$Condition<-car::recode(eddylong$AccessCode,
"'EddySalemStateUniversityF18' = 'Experimental Treatment';
'EddySalemStateUniversityF18s' = 'Experimental Treatment';
'EddySalemStateUniversityF18p' = 'Experimental Treatment';
'EddySalemStateUniversityF18t' = 'Delayed Treatment';
'EddySalemStateUniversityF18r' = 'Delayed Treatment';
else=NA")
wut<-om_label_stats(eddylong, aversion = "V4")
library(tidyverse)
wut<-om_label_stats(eddylong, aversion = "V4")
gm.s<-om_mix_models(eddylong,question="Q11",plot_model=T,get_effects=T,get_tidy=T)
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")
?om_mix_complete
om_mix_plot(gm.s$effects_dat,tidy_dat=gm.s$tidy_dat,show_stats=T,var_label="Growth Mindset")+
theme(legend.position = c(.15, .9))
om_mix_complete(eddylong)
om_mix_complete(eddylong,"misc")
om_mix_complete(eddylong,c("title","y label"))
om_mix_complete(eddylong,c("Growth Mindset","Intellectual Humility"))
om_mix_complete(eddylong,c("Growth Mindset","Intellectual Humility"))+
theme(legend.position = c(.15, .9))
om_mix_complete(eddylong,c("Growth Mindset","Intellectual Humility"))+
theme(legend.position = c(.2, .9))
om_mix_complete(eddylong,c("Growth Mindset"|"Intellectual Humility"))+
theme(legend.position = c(.2, .9))
8/41
18/43
