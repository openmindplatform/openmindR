devtools::install_github("openmindplatform/openmindR")
library(openmindR)
openmindR::om_clean_ppol()
?om_filter_data
#Read in data
load("C:/Users/Matt/Dropbox/OM Team/Research/V4/UCF/Miller/data/app.dat.RData")
getwd()
library(airtabler)
Sys.setenv(AIRTABLE_API_KEY="keyxwOZNxPKLgrwyR")
AIRTABLE_API_KEY="keyxwOZNxPKLgrwyR"
dat.ass.1<-airtable(
base = "appjU7KUyybZ4rGvT",
tables = c("AssessmentV4","AssessmentV5","AccessCodes","ParticipantProgress","InstructorSurvey")
)
#downloads first 100 cases
dat.ass<-air_get("appjU7KUyybZ4rGvT", "AssessmentV4",combined_result = TRUE)
#downloads full data table
dat.ass4 <- dat.ass.1$AssessmentV4$select_all()
dat.ass5 <- dat.ass.1$AssessmentV5$select_all()
dat.acc <- dat.ass.1$AccessCodes$select_all()
dat.par <- dat.ass.1$ParticipantProgress$select_all()
dat.ins <- dat.ass.1$InstructorSurvey$select_all()
# save out data file
save(dat.ass4, file = "C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/ass4.RData")
save(dat.ass5, file = "C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/ass5.RData")
save(dat.acc, file = "C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/acc.RData")
save(dat.par, file = "C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/par.RData")
save(dat.ins, file = "C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/ins.RData")
# save out data file
save(dat.ass4, file = "data/ass4.RData")
getwd()
load("data/ass5.RData")
#Read in data
load("data/ass4.RData")
rm(app.dat)
om_filter_data(app.dat,n_assessments=3,version=4)
om_filter_data(dat.ass4,n_assessments=3,version=4)
library(openmindR)
library(tidyverse)
om_filter_data(dat.ass4,n_assessments=3,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
source('C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/R/cleaning.R', echo=TRUE)
?om_filter_data
#can it accept ranges?
n3v4<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept multiple values?
n1rangev4<-om_filter_data(dat.ass4,n_assessments=c(1,2),version=4)
# access codes
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=grep("Gottlick"))
# access codes
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=grep("Wisconsin"))
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=grep("NYU"))
head(dat.ass4$AccessCode)
# access codes
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode="JayawickremeManhattanCollegeF18")
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode="JayawickremeManhattanCollegeF18")
tail(dat.ass4$AccessCode)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode="EddySalemStateUniversityF18")
# can it filter down to all access codes by pattern matching?
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=grep("Salem"))
?grep
grep("Salem",dat.ass4$AccessCode)
dat.ass4[dat.ass4$AccessCode==grep("Salem")]
dat.ass4[dat.ass4$AccessCode==grep("Salem",dat.ass4$AccessCode)]
dat.ass4$AccessCode==grep("Salem",dat.ass4$AccessCode)
kiwi<-dat.ass4[dat.ass4$AccessCode==grep("Salem",dat.ass4$AccessCode)]
View(dat.ass4)
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18s"))
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18t"))
n1v4apluss<-om_filter_data(dat.ass4,n_assessments=1,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18s"))
?om_filter_data
View(n1v4aplus)
View(n1v4)
View(n2v4)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
nNULLv5<-om_filter_data(dat.ass4,version=5)
nNULLv5<-om_filter_data(dat.ass5,version=5)
#can it accept ranges?
n1plusv5<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept ranges?
n1plusv5<-om_filter_data(dat.ass4,n_assessments>1,version=5)
table(dat.ass5$AssessmentVersion)
#can it accept ranges?
n1plusv5<-om_filter_data(dat.as54,n_assessments>1,version=5)
#can it accept multiple values?
n1rangev5<-om_filter_data(dat.ass5,n_assessments=c(1,2),version=5)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
#can it accept ranges?
n1plusv5<-om_filter_data(dat.ass4,n_assessments>1,version=5)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
#can it accept multiple values?
n1rangev5<-om_filter_data(dat.ass5,n_assessments=c(1,2),version=5)
table(dat.ass4$AccessCode)
table(dat.ass5$AccessCode)
n3v5.1<-om_filter_data(dat.ass5,n_assessments=3,version=5.1)
n2v5.1<-om_filter_data(dat.ass5,n_assessments=2,version=5.1)
n3v5.1<-om_filter_data(dat.ass5,n_assessments=3,version=5.1)
# 5.1
#v5
n1v5.1<-om_filter_data(dat.ass5,n_assessments=1,version=5.1)
?calc_correct
View(n1rangev4)
# calc_correct
calc_correct(dat.par$StepsComplete,dat.par$StepScores,dat.par$StepQuestionTotals)
# calc_correct
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores,dat).as.numeric(par$StepQuestionTotals))
# calc_correct
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores).as.numeric(par$StepQuestionTotals))
# calc_correct
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores),as.numeric(par$StepQuestionTotals))
View(dat.par)
om_clean_par()
?om_clean_par
# om_clean_par
om_clean_par(dat.par)
# om_clean_par
om_clean_par(dat.par)
# om_clean_par
om_clean_par(dat.par)
# om_clean_par
om_clean_par(dat.par)
library(magrittr)
# om_clean_par
om_clean_par(dat.par)
library(tidyverse)
# om_clean_par
om_clean_par(dat.par)
install.packages("glue")
library(glue)
# om_clean_par
om_clean_par(dat.par)
library(magrittr)
library(tidyverse)
library(glue)
library(glue)
library(tidyverse)
library(openmindR)
# om_clean_par
om_clean_par(dat.par)
library(tidyverse)
save.image("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/Matt Testing.Rproj.RData")
library(openmindR)
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
om_filter_data(dat.ass4,n_assessments=3,version=4)
library(tidyverse)
install.packages("glue")
install.packages("tidyverse")
library(tidyverse)
om_filter_data(dat.ass4,n_assessments=3,version=4)
# om_clean_par
om_clean_par(dat.par)
load("data/ins.RData")
load("data/par.RData")
load("data/acc.RData")
# om_clean_par
om_clean_par(dat.par)
?om_clean_par
library(magrittr)
library(tidyverse)
# om_clean_par
om_clean_par(dat.par)
library(magrittr)
# om_clean_par
om_clean_par(dat.par)
library(glue)
# om_clean_par
om_clean_par(dat.par)
# om_clean_par
clean_par<-om_clean_par(dat.par)
View(clean_par)
table(clean_par$StepTimes)
table(clean_par$StepTimes1)
calc_correct(clean_par$StepsComplete,clean_par$StepScores,clean_par$StepQuestionTotals)
#clean ppol
?om_clean_ppol()
table(om_clean_ppol(dat.ass4)
table(om_clean_ppol(dat.ass4)
)
table(om_clean_ppol(dat.ass4))
om_clean_ppol(dat.ass4)
om_clean_ppol(dat.ass4)
library(tidyverse)
om_clean_ppol(dat.ass4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
#Error in is_string(match) : object 'var_strings' not found
om_clean_ppol(dat.ass4)
#Error in is_string(match) : object 'var_strings' not found
om_clean_ppol(n2v4)
# Error in is_string(match) : object 'var_strings' not found
require(tidyverse)
om_clean_ppol(n2v4)
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
load("data/acc.RData")
load("data/par.RData")
load("data/ins.RData")
om_filter_data(dat.ass4,n_assessments=3,version=4)
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
library(openmindR)
om_filter_data(dat.ass4,n_assessments=3,version=4)
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
#can it accept ranges?
n1plusv4<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept multiple values?
n1rangev4<-om_filter_data(dat.ass4,n_assessments=c(1,2),version=4)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18t","EddySalemStateUniversityF18s"),
exact_search=T)
# can it filter down to all access codes by pattern matching?
n1v4<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode="CLP",exact_search = F)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
nNULLv5<-om_filter_data(dat.ass5,version=5)
#can it accept multiple values?
n1rangev5<-om_filter_data(dat.ass5,n_assessments=c(1,2),version=5)
# 5.1
#v5
n1v5.1<-om_filter_data(dat.ass5,n_assessments=1,version=5.1)
n2v5.1<-om_filter_data(dat.ass5,n_assessments=2,version=5.1)
n3v5.1<-om_filter_data(dat.ass5,n_assessments=3,version=5.1)
# calc_correct
calc_correct(dat.par$StepsComplete,dat.par$StepScores,dat.par$StepQuestionTotals)
# spits out a bunch of NAs
# this function should have an argument specifying data frame where those 3 variables are, and convert them to numeric
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores),as.numeric(par$StepQuestionTotals))
clean_par<-om_clean_par(dat.par)
#clean ppol
?om_clean_ppol()
n3v4cleanppol<-om_clean_ppol(n3v4)
table(n2v4cleanppol$ppol_raw)
table(n2v4cleanppol$ppol_num)
table(n2v4cleanppol$ppol)
table(n2v4cleanppol$ppol_cat)
#construct measures
?om_construct_measures
om_construct_measures(n3v4cleanppol)
n3v4constructed<-om_construct_measures(n3v4cleanppol)
summary(n2v4constructed)
summary(n3v4constructed)
n3v4constructedremdups<-remove_dups(n3v4constructed)
n3v4long<-om_gather(n3v4constructedremdups,which_strings=q_c_strings)
om_summarize_comparisons(n3v4long)
om_summarize_comparisons(n3v4long,compare="PrePost")
prepo<-om_summarize_comparisons(n3v4long,compare="PrePost")
prefo<-om_summarize_comparisons(n3v4long,compare="PreFollow")
View(prefo)
View(prepo)
View(prefo)
prefo<-om_summarize_comparisons(n3v4long)
View(prefo)
38*30
58+400+156
