# cleaned_dat %>% View()
#
# assessmentv7$DateStarted
om_base <- "appjU7KUyybZ4rGvT"
#
# cleaned_dat %>%
#   slice(1:10) %>%# pull(OMID)
#   split(1:nrow(.)) %>%
#   map(
#     ~{
#       airtabler::air_update(om_base, "AssessmentV7", record_id = .x$id, record_data = .x %>% select(OpenMindVersion, UserType, Country, Research, ModsCompleteN, QScore, DateStarted, DateFinished) %>% as.list())
#     }
#   )
variables_to_update <- c("OpenMindVersion", "UserType",
"Country", "Research",
"ModsCompleteN", "QScore")
updater <- function(var) {
cleaned_dat %>%
# slice(1:10) %>% #pull(OMID)
select(id, var) %>%
split(1:nrow(.)) %>%
map(
~{
airtabler::air_update(om_base, "AssessmentV7", record_id = .x$id, record_data = .x %>% select(var) %>% as.list())
}
)
}
variables_to_update %>%
walk(updater)
# [1] "7754939640757" "6646961451955"
# [3] "8566048222619" "9712024297384"
# [5] "8032186098087" "181522735467"
# [7] "2615940058292" "2966422999405"
# [9] "1859687375674" "7145903704073"
assessmentv7  %>%
select(-UserType) %>%
left_join(acs) %>%
## join in Access Code Data
# coalesce_join(acs, join = dplyr::left_join) %>%
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
select(OMID, UserType, everything()) %>%
# filter(is.na(UserType)) %>%
View
updater2 <- function(var) {
assessmentv7  %>%
# select(-UserType) %>%
left_join(acs) %>%
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
# slice(1:10) %>% #pull(OMID)
select(id, var) %>%
split(1:nrow(.)) %>%
map(
~{
airtabler::air_update(om_base, "AssessmentV7", record_id = .x$id, record_data = .x %>% select(var) %>% as.list())
}
)
}
c("UserType") %>%
walk(updater2)
# assessmentv7  %>%
#   select(-UserType) %>%
#   left_join(acs) %>% select(GroupName)
variables_to_update %>%
walk(updater)
cleaned_dat
## bring it all together
cleaned_dat <- pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
mutate(Research = ifelse(is.na(Research), "No", Research)) %>%
drop_na(UserType) %>%
drop_na(DateStarted) %>%
mutate(QScore = as.character(QScore)) %>%
mutate(ModsCompleteN = as.character(ModsCompleteN)) %>%
# mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
# mutate(DateFinished  = lubridate::as_date(DateFinished )) %>%
mutate_all(~ifelse(is.na(.x), "", .x))
## bring it all together
cleaned_dat <- pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(WithinADay)) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
mutate(Research = ifelse(is.na(Research), "No", Research)) %>%
drop_na(UserType) %>%
drop_na(DateStarted) %>%
mutate(QScore = as.character(QScore)) %>%
mutate(ModsCompleteN = as.character(ModsCompleteN)) %>%
# mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
# mutate(DateFinished  = lubridate::as_date(DateFinished )) %>%
mutate_all(~ifelse(is.na(.x), "", .x))
pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join)
pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
# mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join)
pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
# mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(WithinADay))
assessmentv7 <- om_download_at(key, tables = "AssessmentV7",
clean = T, v6.1 = T) %>%
janitor::remove_empty() %>%
# filter(is.na(UserType)) %>%
filter(OpenMindVersion %in% c("3.9", "4.1")) %>%
select(-OpenMindVersion, -UserType,
-Country, -Research,
-ModsCompleteN, -QScore,
-DateStarted, -DateFinished)
## bring it all together
cleaned_dat <- pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
# mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(WithinADay)) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
mutate(Research = ifelse(is.na(Research), "No", Research)) %>%
drop_na(UserType) %>%
drop_na(DateStarted) %>%
mutate(QScore = as.character(QScore)) %>%
mutate(ModsCompleteN = as.character(ModsCompleteN)) %>%
# mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
# mutate(DateFinished  = lubridate::as_date(DateFinished )) %>%
mutate_all(~ifelse(is.na(.x), "", .x))
## bring it all together
cleaned_dat <- pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(WithinADay)) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
mutate(Research = ifelse(is.na(Research), "No", Research)) %>%
drop_na(UserType) %>%
drop_na(DateStarted) %>%
mutate(QScore = as.character(QScore)) %>%
mutate(ModsCompleteN = as.character(ModsCompleteN)) %>%
# mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
# mutate(DateFinished  = lubridate::as_date(DateFinished )) %>%
mutate_all(~ifelse(is.na(.x), "", .x))
cleaned_dat
cleaned_dat %>% View()
## bring it all together
cleaned_dat <- pp1   %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_datetime(DateFinished)) %>%
mutate(DateStarted = lubridate::as_datetime(DateStarted)) %>%
## compute WithinADay
# mutate(WithinADay = as.character(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv7, join = dplyr::right_join) %>%
## compute WithinADay
# mutate(WithinADay = as.numeric(WithinADay)) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
mutate(Research = ifelse(is.na(Research), "No", Research)) %>%
drop_na(UserType) %>%
drop_na(DateStarted) %>%
mutate(QScore = as.character(QScore)) %>%
mutate(ModsCompleteN = as.character(ModsCompleteN)) %>%
# mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
# mutate(DateFinished  = lubridate::as_date(DateFinished )) %>%
mutate_all(~ifelse(is.na(.x), "", .x))
variables_to_update <- c("OpenMindVersion", "UserType",
"Country", "Research",
"ModsCompleteN", "QScore")
updater <- function(var) {
cleaned_dat %>%
# slice(1:10) %>% #pull(OMID)
select(id, var) %>%
split(1:nrow(.)) %>%
map(
~{
airtabler::air_update(om_base, "AssessmentV7", record_id = .x$id, record_data = .x %>% select(var) %>% as.list())
}
)
}
variables_to_update %>%
walk(updater)
View(pp2)
## bring it all together
cleaned_dat <- pp1  %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_date(DateFinished)) %>%
mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv6, join = dplyr::right_join) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType))# %>%
cleaned_dat %>%
filter(is.na(UserType)) %>%
View()
pacman::p_load(tidyverse, openmindR)
assessmentv6 <- om_download_at(key, tables = "AssessmentV6",
clean = T, v6.1 = T)
## ParticipantProgress1
pp1 <- om_download_at(key, tables = "ParticipantProgress") %>%
select(OMID, AccessCode, OpenMindVersion, Country,
Research, DateStarted, DateFinished)
## ParticipantProgress2
pp2 <- om_download_at(key, tables = "ParticipantProgress2") %>%
select(OMID, AccessCode, OpenMindVersion, Country,
Research, DateStarted, DateFinished)
## AccessCodes
acs <- om_download_at(key, tables = "AccessCodes") %>%
select(AccessCode, UserType, GroupName)
## bring it all together
cleaned_dat <- pp1  %>%
bind_rows(pp2) %>%
## turn dates into date format
mutate(DateFinished = lubridate::as_date(DateFinished)) %>%
mutate(DateStarted = lubridate::as_date(DateStarted)) %>%
## compute WithinADay
mutate(WithinADay = as.numeric(DateStarted==DateFinished)) %>%
## join in Assessment data
coalesce_join(assessmentv6, join = dplyr::right_join) %>%
## join in Access Code Data
coalesce_join(acs, join = dplyr::left_join) %>%
## if AccessCode is IndividualUser, then UserType is IndividualUser
mutate(UserType = ifelse(AccessCode == "IndividualUser",
"IndividualUser", UserType)) %>%
drop_na(UserType) %>%
drop_na(DateStarted)
devtools::install()
devtools::load_all()
perc_improved(1, 2, 5, "df")
perc_improved(1, 2, 5, "df")
perc_improved(1, 2, 5, "dffg")
c("sdf", "wixer") %>% map(~perc_improved(1, 2, 5, .x))
c("sdf", "wixer") %>% purrr::map(~perc_improved(1, 2, 5, .x))
install.packages(c("ggthemes", "stargazer"))
?om_download_at
?openmindR::om_download_at
devtools::document()
devtools::install()
remove.packages("openmindR")
devtools::document()
devtools::install_github("favstats/openmindR")
devtools::install_github("openmindplatform/openmindR")
devtools::load_all()
assessmentv7 <- om_download_at(key,
tables = "AssessmentV6",
clean = TRUE)
# AssessmentV7 <- airtabler::airtable(om_base, "AssessmentV7Copy")$AssessmentV7Copy$select_all() %>%
# janitor::remove_empty()
key <- readr::read_lines("../../Research/Projects/Keys/airtabler.txt")
assessmentv7 <- om_download_at(key,
tables = "AssessmentV6",
clean = TRUE)
assessmentv7$C1Post
devtools::load_all()
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
key <- readr::read_lines("../../Research/Projects/Keys/airtabler.txt")
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
assessmentv7 %>%
dplyr::count(ppol, ppol_extreme)
key <- readr::read_lines("../../Keys/airtabler.txt")
devtools::load_all()
devtools::document()
devtools::install()
devtools::install()
knitr::opts_chunk$set(message = F,
warning = F,
eval = F)
key <- readr::read_lines("../../Keys/airtabler.txt")
ups <- c("GrowthMindset", "CIHS_LIO",
"OutgroupLiking", "OutgroupMotivation",
"Preparedness", "C1", "C6",
"IntellectualHumility", "GM",
"IHSub1", "IHSub2", "IHSub3",
"IHCultureSub1", "IHCultureSub2", "IHCultureSub3",
"SE", "Belong", "Dissent", "Tolerance",
"IngroupLiking", "IngroupMotivation",
"OutgroupLiking", "OutgroupMotivation",
"MotivationCon", "MotivationProg")
downs <- c("AffPol1", "AffPol2",
"GBSS", "MAA", "C5",
"Anxiety", "Attribution",
"IntAnx", "SocialDistance",
"Avoidance")
# AssessmentV6Codebook <- readRDS("data/AssessmentV6Codebook.RDS")
#
# usethis::use_data(AssessmentV6Codebook)
#
# AssessmentV7Codebook <- readRDS("../../Research/Assessments & Codebooks/v7/AssessmentV7Codebook/data/AssessmentV7Codebook.RDS")
#
# usethis::use_data(AssessmentV7Codebook)
# v6_var_strings <- "AffPol1|AffPol2|OutgroupLiking|IngroupLiking|MotivationProg|MotivationCon|CIHS_LIO|GrowthMindset|GBSS|MAA|OutgroupMotivation|IngroupMotivation|Preparedness|C1|C5|C6|IntellectualHumility|SoughtOutDifferent"
#
# usethis::use_data(v6_var_strings, overwrite = T)
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
mod1 <- lm(ppol_extreme ~ ppol_cat*gender,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
devtools::load_all()
mod1 <- lm(ppol_extreme ~ ppol_cat*gender,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
results$estimated_means
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = F)
results$estimated_means
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D1,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
results
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D2,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D3,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D4,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D5,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
mod1 <- lm(AffPol1Pre ~ ppol_catmod*D6,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
mod1 <- lm(AffPol1Pre ~ ppol_catmod*UserType,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
results
mod1 <- lm(IHsub1Pre ~ ppol_catmod*UserType,
data = assessmentv7)
mod1 <- lm(IHSub1Pre ~ ppol_catmod*UserType,
data = assessmentv7)
results <- assessmentv7 %>%
om_lm(lm_model = mod1,
type = "int",
switch = T)
modelbased::estimate_contrasts(mod1)
modelbased::estimate_contrasts(mod1)
devtools::load_all()
devtools::document()
c("Pre", "Post") %in% c("Pre", "Post", "FollowUp")
c("Pre", "Post") == c("Pre", "Post", "FollowUp")
c("Pre", "Post") %in% c("Pre", "Post", "FollowUp")
c("Pre", "Post", "FollowUp") %in% c("Pre", "Post", "FollowUp")
c("Post", "Pre") %in% c("Pre", "Post", "FollowUp")
c("Post", "Pre") %in% c("Pre", "Post", "FollowUp") == 2
length(c("Post", "Pre") %in% c("Pre", "Post", "FollowUp")) == 2
"FollowUp" %in% TimeVars
"FollowUp" %in% c("Pre", "Post")
devtools::install()
devtools::document()
cleaned_dat_long <- openmindR::om_gather(cleaned_dat, which_strings = "AffPol1")
cleaned_dat_long <- openmindR::om_gather(assessmentv7, which_strings = "AffPol1")
devtools::install()
devtools::load_all()
cleaned_dat_long <- openmindR::om_gather(assessmentv7, which_strings = "AffPol1")
mixed <- lme4::lmer(Response~Time * gender + (1|OMID), data = cleaned_dat_long)
results <- om_lmer(mixed,  "meansd")
devtools::load_all()
results <- om_lmer(mixed,  "meansd")
devtools::load_all()
results <- om_lmer(mixed,  "meansd")
devtools::load_all()
devtools::install()
devtools::load_all()
results <- om_lmer(mixed,  "meansd")
debugonce(om_lmer)
results <- om_lmer(mixed,  "meansd")
results <- om_lmer(mixed,
type = "int",
mod_transform = "meansd")
results$model
results$table
results$report %>%
cat()
results$report %>%
cat()
results$estimated_means %>%
knitr::kable()
results$plot  +
ylab("Affective Polarization")
results$plot
results$plot  +
ggplot2::ylab("Affective Polarization") +
ylim(0, 50)
results$plot  +
ggplot2::ylab("Affective Polarization") +
ggplot2::ylim(0, 50)
devtools::document()
dplyr::all_equal()
dplyr::all_equal(T, >T)
dplyr::all_equal(T, T)
dplyr::all_equal(T, F)
prepost_lvls <- c("Pre", T2)
devtools::install_github("openmindplatform/openmindR")
