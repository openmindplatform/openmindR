openmindR::coalesce_join(join = dplyr::left_join,
cleaned_dat %>%
dplyr::mutate(createdTime = lubridate::as_datetime(createdTime)) %>%
dplyr::filter(OMID %in% dups)) %>%
dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))
message(stringr::str_glue("Removing {round(length(dups))} duplicates...\n"))
## remove OMIDs that we don't want (older + less complete)
cleaned_dat %>%
dplyr::filter(!(OMID %in% dups)) %>%
dplyr::mutate(createdTime = lubridate::as_datetime(createdTime)) %>%
dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))  %>%
dplyr::bind_rows(removed_airtable_dups)
devtools::load_all()
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par(parse_feedback = T)
dat.ass %>%
om_rescale()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
gathered_dat %>%
om_summarize_comparisons(aversion = "V5",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
gathered_dat <- gathered_dat %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion == 4)
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion >= 5)
}
)
Variant <- "V5"
aversion <- "V4"
gathered_dat <- gathered_dat %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion == 4)
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion >= 5)
}
)
basicsummarystats <- gathered_dat %>%
openmindR::om_compare(compare) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::left_join(assessmentv4_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V4")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "All",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "All")
}
) %>%
dplyr::rename(Question_txt = Content) %>%
dplyr::mutate(Question_txt = dplyr::case_when(
variable_code == "Q14" ~ "Affective Polarization",
variable_code == "Q15" ~ "Liking for Ingroup",
variable_code == "Q16" ~ "Liking for Outgroup",
variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
variable_code == "Q18" ~ "Intellectual Humility",
T ~ Question_txt
)) %>%
dplyr::mutate(Outcome = dplyr::case_when(
variable_code == "Q14" ~ 'Affective Polarization Measure',
variable_code == "Q15" ~  'Liking of Ingroup',
variable_code == "Q16" ~  'Liking of Outgroup',
variable_code == "Q17" ~  'Ingroup-Outgroup Polarization Measure',
variable_code == "Q18" ~  'Intellectual Humility Measure',
T ~ Construct
)) %>%
dplyr::select(Outcome, Question_txt, cohend:percentimproved, variable_code, Comparison, moderates, Variant) %>%
tidyr::drop_na(Outcome)
basicsummarystats <- gathered_dat %>%
openmindR::om_compare(compare) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::left_join(assessmentv4_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V4")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "All",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "All")
}
) %>%
dplyr::rename(Question_txt = Content) %>%
dplyr::mutate(Question_txt = dplyr::case_when(
variable_code == "Q14" ~ "Affective Polarization",
variable_code == "Q15" ~ "Liking for Ingroup",
variable_code == "Q16" ~ "Liking for Outgroup",
variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
variable_code == "Q18" ~ "Intellectual Humility",
T ~ Question_txt
)) %>%
dplyr::mutate(Outcome = dplyr::case_when(
variable_code == "Q14" ~ 'Affective Polarization Measure',
variable_code == "Q15" ~  'Liking of Ingroup',
variable_code == "Q16" ~  'Liking of Outgroup',
variable_code == "Q17" ~  'Ingroup-Outgroup Polarization Measure',
variable_code == "Q18" ~  'Intellectual Humility Measure',
T ~ Construct
)) %>%
dplyr::select(Outcome, Question_txt, cohend:percentimproved, variable_code, Comparison, moderates, Variant) %>%
tidyr::drop_na(Outcome)
gathered_dat <- gathered_dat %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion == 4)
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion >= 5)
}
)
gathered_dat
gathered_dat %>%
openmindR::om_compare(compare) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::left_join(assessmentv4_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V4")
}
)
gathered_dat %>%
openmindR::om_compare(compare)
compare = c("PrePost", "PreFollow")
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
basicsummarystats <- gathered_dat %>%
openmindR::om_compare(compare) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V5/V5.1")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::left_join(assessmentv4_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "V4")
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "All",
call = ~{
.x %>%
dplyr::left_join(assessmentv5_codebook %>%
dplyr::rename(variable_code = Mapping)) %>%
dplyr::mutate(Variant = "All")
}
) %>%
dplyr::rename(Question_txt = Content) %>%
dplyr::mutate(Question_txt = dplyr::case_when(
variable_code == "Q14" ~ "Affective Polarization",
variable_code == "Q15" ~ "Liking for Ingroup",
variable_code == "Q16" ~ "Liking for Outgroup",
variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
variable_code == "Q18" ~ "Intellectual Humility",
T ~ Question_txt
)) %>%
dplyr::mutate(Outcome = dplyr::case_when(
variable_code == "Q14" ~ 'Affective Polarization Measure',
variable_code == "Q15" ~  'Liking of Ingroup',
variable_code == "Q16" ~  'Liking of Outgroup',
variable_code == "Q17" ~  'Ingroup-Outgroup Polarization Measure',
variable_code == "Q18" ~  'Intellectual Humility Measure',
T ~ Construct
)) %>%
dplyr::select(Outcome, Question_txt, cohend:percentimproved, variable_code, Comparison, moderates, Variant) %>%
tidyr::drop_na(Outcome)
gathered_dat %>%
openmindR::om_compare(compare)
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17"))
compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17"))
compare_dat_prepost %>% count(variable_code)
.data <- compare_dat_prepost
dplyr::bind_rows(
## All variables that are not Q14 or Q17
.data %>%
dplyr::filter(variable_code %nin% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(...,
q14_q17 = F),
## Just Q14 and Q17
.data %>%
dplyr::filter(variable_code %in% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(...,
q14_q17 = T)
)
dplyr::bind_rows(
## All variables that are not Q14 or Q17
.data %>%
dplyr::filter(variable_code %nin% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(#...,
q14_q17 = F),
## Just Q14 and Q17
.data %>%
dplyr::filter(variable_code %in% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(#...,
q14_q17 = T)
)
.data %>%
dplyr::filter(variable_code %nin% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(#...,
q14_q17 = F)
.data %>%
dplyr::filter(variable_code %in% c("Q14", "Q17")) %>%
dplyr::group_by(variable_code) %>%
openmindR::summarize_comparison(#...,
q14_q17 = T)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>% count(variable_code)
dat.ass
dat.ass %>%
om_construct_measures()
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_rescale() %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>% count(variable_code)
q_c_strings
dat.ass %>%
om_rescale() %>%
om_construct_measures() %>%
remove_dups()
#' Remove duplicates from AirTable
#'
#' @section Workflow:
#' \code{\link{om_filter_data}} -> \code{\link{om_rescale}} -> \code{\link{om_clean_ppol}} -> \code{\link{om_construct_measures}} -> \code{\link{remove_dups}} -> \code{\link{om_gather}}
#'
#' @param cleaned_dat Duplicated data from AirTable
#' @export
remove_dups <- function(cleaned_dat) {
## remove duplicates from AirTable
# cleaned_dat <- dat.ass
## pull duplicated OMIDs
cleaned_dat %>%
dplyr::filter(duplicated(OMID)) %>%
dplyr::pull(OMID) -> dups
# count_na <- function(x) sum(is.na(x), na.rm = T)
## pull OMIDs that are most complete + latest entries
removed_airtable_dups <-  cleaned_dat %>%
dplyr::mutate(createdTime = lubridate::as_datetime(createdTime)) %>%
dplyr::filter(OMID %in% dups) %>%
dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))  %>%
dplyr::mutate(AssessmentsDone = as.numeric(AssessmentsDone))  %>%
dplyr::mutate(count_na = rowSums(is.na(.), na.rm = T)) %>%
dplyr::arrange(OMID, desc(createdTime), desc(AssessmentVersion), desc(AssessmentsDone), count_na) %>%
dplyr::select(OMID, createdTime, AssessmentVersion, AssessmentsDone, count_na, dplyr::everything()) %>%
dplyr::group_by(OMID) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
openmindR::do_if(.,
condition = is.numeric(cleaned_dat$AssessmentVersion),
call = ~{.x %>% dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))}
) %>%
openmindR::do_if(.,
condition = is.character(cleaned_dat$AssessmentVersion),
call = ~{.x %>% dplyr::mutate(AssessmentVersion = as.character(AssessmentVersion))}
) %>%
openmindR::do_if(.,
condition = is.numeric(cleaned_dat$AssessmentsDone),
call = ~{.x %>% dplyr::mutate(AssessmentsDone = as.numeric(AssessmentsDone))}
) %>%
openmindR::do_if(.,
condition = is.character(cleaned_dat$AssessmentsDone),
call = ~{.x %>% dplyr::mutate(AssessmentsDone = as.character(AssessmentsDone))}
) %>%
openmindR::coalesce_join(join = dplyr::left_join,
cleaned_dat %>%
dplyr::mutate(createdTime = lubridate::as_datetime(createdTime)) %>%
dplyr::filter(OMID %in% dups)) %>%
dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))
message(stringr::str_glue("Removing {round(length(dups))} duplicates...\n"))
## remove OMIDs that we don't want (older + less complete)
cleaned_dat %>%
dplyr::filter(!(OMID %in% dups)) %>%
dplyr::mutate(createdTime = lubridate::as_datetime(createdTime)) %>%
dplyr::mutate(AssessmentVersion = as.numeric(AssessmentVersion))  %>%
dplyr::bind_rows(removed_airtable_dups)
}
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_rescale() %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>% count(variable_code)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
om_label_stats(gathered_dat, aversion = "V4")
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
Q11_dat <- om_mix_models(gathered_dat,
question = "Q11",
plot_model = T,
get_effects = T,
get_tidy = T)
Q11_dat$effects_dat %>%
knitr::kable()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::install_github("openmindplatform/openmindR")
devtools::install_github("openmindplatform/openmindR")
