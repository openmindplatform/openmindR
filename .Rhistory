ww <-  random(24)
airtabler <- data_encrypt(msg, key, ww)
# saveRDS(airtabler, "../../Keys/at")
# airtabler
airtabler_encryp <- bin2hex(airtabler)
# hex2bin(airtabler_encryp);airtabler
# charToRaw(airtabler_encryp)
cat(airtabler_encryp, file = "../../Keys/at")
## store key
saveRDS(key, "../../Keys/omkey.rds")
# key <- hash(charToRaw("This is a secret passphrase"))
# msg <- serialize(iris, NULL)
#
# # Encrypt with a random nonce
# nonce <- random(24)
# cipher <- data_encrypt(msg, key, nonce)
#
# # Decrypt with same key and nonce
# orig <- data_decrypt(cipher, key, nonce)
# identical(iris, unserialize(orig))
# Decrypt with same stored key and nonce
decipher <- hex2bin(readr::read_lines("../../Keys/at"))
decipher
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(decipher, key, nonce = ww))
unserialize(data_decrypt(bin = decipher, key = key, nonce = ww))
data_decrypt(bin = decipher, key = key, nonce = ww)
library(sodium)
key <- keygen()
msg <- serialize(readLines("../../Keys/airtabler.txt"), NULL)
# msg <- hash(charToRaw(readLines("../../Keys/airtabler.txt")))
ww <-  random(24)
airtabler <- data_encrypt(msg, key, ww)
# saveRDS(airtabler, "../../Keys/at")
# airtabler
airtabler_encryp <- bin2hex(airtabler)
# hex2bin(airtabler_encryp);airtabler
# charToRaw(airtabler_encryp)
cat(airtabler_encryp, file = "../../Keys/at")
## store key
saveRDS(key, "../../Keys/omkey.rds")
# key <- hash(charToRaw("This is a secret passphrase"))
# msg <- serialize(iris, NULL)
#
# # Encrypt with a random nonce
# nonce <- random(24)
# cipher <- data_encrypt(msg, key, nonce)
#
# # Decrypt with same key and nonce
# orig <- data_decrypt(cipher, key, nonce)
# identical(iris, unserialize(orig))
# Decrypt with same stored key and nonce
decipher <- hex2bin(readr::read_lines("../../Keys/at"))
# decipher <- readRDS("../../Keys/at")
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(bin = decipher, key = key, nonce = ww))
# msg <- hash(charToRaw(readLines("../../Keys/airtabler.txt")))
public_nonce <-  random(24)
usethis::use_data(public_nonce)
msg
airtabler_encryp
devtools::load_all()
# msg <- hash(charToRaw(readLines("../../Keys/airtabler.txt")))
# public_nonce <-  random(24)
# usethis::use_data(public_nonce)
airtabler <- data_encrypt(msg, key, public_nonce)
library(sodium)
key <- keygen()
msg <- serialize(readLines("../../Keys/airtabler.txt"), NULL)
# msg <- hash(charToRaw(readLines("../../Keys/airtabler.txt")))
# public_nonce <-  random(24)
# usethis::use_data(public_nonce)
airtabler <- data_encrypt(msg, key, public_nonce)
# saveRDS(airtabler, "../../Keys/at")
# airtabler
airtabler_encryp <- bin2hex(airtabler)
# hex2bin(airtabler_encryp);airtabler
# charToRaw(airtabler_encryp)
cat(airtabler_encryp, file = "../../Keys/at")
## store key
saveRDS(key, "../../Keys/omkey.rds")
# key <- hash(charToRaw("This is a secret passphrase"))
# msg <- serialize(iris, NULL)
#
# # Encrypt with a random nonce
# nonce <- random(24)
# cipher <- data_encrypt(msg, key, nonce)
#
# # Decrypt with same key and nonce
# orig <- data_decrypt(cipher, key, nonce)
# identical(iris, unserialize(orig))
# Decrypt with same stored key and nonce
decipher <- hex2bin(readr::read_lines("../../Keys/at"))
# decipher <- readRDS("../../Keys/at")
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(bin = decipher, key = key, nonce = ww))
# Decrypt with same stored key and nonce
decipher <- hex2bin(readr::read_lines("../../Keys/at"))
# decipher <- readRDS("../../Keys/at")
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(bin = decipher, key = key, nonce = public_nonce))
library(sodium)
key <- keygen()
msg <- serialize(readr::read_lines("../../Keys/airtabler.txt"), NULL)
# msg <- hash(charToRaw(readLines("../../Keys/airtabler.txt")))
# public_nonce <-  random(24)
# usethis::use_data(public_nonce)
airtabler <- data_encrypt(msg, key, public_nonce)
# saveRDS(airtabler, "../../Keys/at")
# airtabler
airtabler_encryp <- bin2hex(airtabler)
# hex2bin(airtabler_encryp);airtabler
# charToRaw(airtabler_encryp)
cat(airtabler_encryp, file = "../../Keys/at")
## store key
saveRDS(key, "../../Keys/omkey.rds")
# key <- hash(charToRaw("This is a secret passphrase"))
# msg <- serialize(iris, NULL)
#
# # Encrypt with a random nonce
# nonce <- random(24)
# cipher <- data_encrypt(msg, key, nonce)
#
# # Decrypt with same key and nonce
# orig <- data_decrypt(cipher, key, nonce)
# identical(iris, unserialize(orig))
airtabler_encryp
devtools::install_github("openmindplatform/openmindR")
cyphr::encrypt_string("hello")
# Decrypt with same stored key and nonce
# decipher <- hex2bin(readr::read_lines("../../Keys/at"))
decipher <- hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
library(sodium)
# Decrypt with same stored key and nonce
# decipher <- hex2bin(readr::read_lines("../../Keys/at"))
decipher <- hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(bin = decipher, key = key, nonce = public_nonce))
devtools::load_all()
# Decrypt with same stored key and nonce
# decipher <- hex2bin(readr::read_lines("../../Keys/at"))
decipher <- hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
key <- readRDS("../../Keys/omkey.rds")
unserialize(data_decrypt(bin = decipher, key = key, nonce = public_nonce))
devtools::install_github("openmindplatform/openmindR")
cyphr::encrypt_string("hello")
file.choose()
file.choose()
Sys.getenv("AIRTABLE_API_KEY")
message("No key specified. Using environment variable.")
message("No key specified but found environment variabke: AIRTABLE_API_KEY. Using that.")
message("No key specified and did not find environment variable: AIRTABLE_API_KEY.")
message("Setting API key as AIRTABLE_API_KEY environment variable.")
message("No key specified and did not find environment variable: AIRTABLE_API_KEY.");message("Setting API key as AIRTABLE_API_KEY environment variable.")
airtabler:::air_api_key() <- function ()
{
decipher <- sodium::hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
key <- unserialize(sodium::data_decrypt(bin = decipher, key = key, nonce = public_nonce))
return(key)
}
airtabler:::air_api_key() <- function () {
decipher <- sodium::hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
key <- unserialize(sodium::data_decrypt(bin = decipher, key = key, nonce = public_nonce))
return(key)
}
airtabler:::air_api_key <- function () {
decipher <- sodium::hex2bin(Sys.getenv("AIRTABLE_API_KEY"))
key <- unserialize(sodium::data_decrypt(bin = decipher, key = key, nonce = public_nonce))
return(key)
}
devtools::load_all()
devtools::install_github("openmindplatform/openmindR")
cyphr::encrypt_string("hello")
om_download_at(tables = "TechnialInquries")
Sys.getenv("OMKEY")
Sys.getenv("OMKEY") != ""
devtools::load_all()
devtools::load_all()
om_download_at(tables = "TechnialInquries")
devtools::load_all()
devtools::load_all()
om_download_at(tables = "TechnialInquries")
om_download_at(tables = "AccessCodes")
public_nonce
decipher <- sodium::hex2bin(raw_key)
raw_key <- Sys.getenv("AIRTABLE_API_KEY")
raw_key
devtools::install_github("openmindplatform/openmindR")
devtools
devtools::load_all()
om_download_at(tables = "AccessCodes")
om_download_at(tables = "AccessCodes")
usethis::edit_r_environ()
devtools::load_all
devtools::load_all()
devtools::install_github("openmindplatform/openmindR")
cyphr::encrypt_string("hello")
om_download_at(tables = "AccessCodes")
om_download_at(tables = "AccessCodes")
usethis::edit_r_environ()
Sys.getenv("OMKEY")
devtools::load_all()
devtools::install_github("openmindplatform/openmindR")
cyphr::encrypt_string("hello")
om_download_at(tables = "AccessCodes")
omkey
public_nonce
devtools::load_all()
public_nonce
key <- readRDS("../../Keys/omkey.rds")
usethis::edit_r_environ()
msg <- serialize(Sys.getenv("MAILCHIMP_KEY"), NULL)
airtabler <- data_encrypt(msg, key, public_nonce)
library(sodium)
airtabler <- data_encrypt(msg, key, public_nonce)
# saveRDS(airtabler, "../../Keys/at")
# airtabler
airtabler_encryp <- bin2hex(airtabler)
# hex2bin(airtabler_encryp);airtabler
# charToRaw(airtabler_encryp)
cat(airtabler_encryp, file = "../../Keys/mc")
airtabler_encryp
devtools::load_all()
devtools::install_github
devtools::install_github("openmindplatform/openmindR")
#' @export
decrypt_AT_key <- function(api_key, omkey_path) {
omkey <- readRDS(omkey_path)
decipher <- sodium::hex2bin(api_key)
key <- unserialize(sodium::data_decrypt(bin = decipher, key = omkey, nonce = public_nonce))
# message("Setting API key as AIRTABLE_API_KEY environment variable.")
Sys.setenv(AIRTABLE_API_KEY = key)
return(key)
}
decrypt_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
library(public_nonce)
library(openmindR)
decrypt_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
#' @export
set_AT_key <- function(api_key, omkey_path, return_key = F) {
omkey <- readRDS(omkey_path)
decipher <- sodium::hex2bin(api_key)
key <- unserialize(sodium::data_decrypt(bin = decipher, key = omkey, nonce = public_nonce))
# message("Setting API key as AIRTABLE_API_KEY environment variable.")
Sys.setenv(AIRTABLE_API_KEY = key)
if(return_key) return(key)
}
set_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
#' @export
set_AT_key <- function(api_key, omkey_path, return_key = F) {
if(api_key == Sys.getenv("AIRTABLE_API_KEY")) stop("AirTable API Key already set.")
omkey <- readRDS(omkey_path)
decipher <- sodium::hex2bin(api_key)
key <- unserialize(sodium::data_decrypt(bin = decipher, key = omkey, nonce = public_nonce))
# message("Setting API key as AIRTABLE_API_KEY environment variable.")
Sys.setenv(AIRTABLE_API_KEY = key)
if(return_key) return(key)
}
library(openmindR)
set_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
#' @export
set_AT_key <- function(api_key, omkey_path, return_key = F) {
if(api_key == Sys.getenv("AIRTABLE_API_KEY")) stop("AirTable API Key already set.")
omkey <- readRDS(omkey_path)
decipher <- sodium::hex2bin(api_key)
key <- unserialize(sodium::data_decrypt(bin = decipher, key = omkey, nonce = public_nonce))
# message("Setting API key as AIRTABLE_API_KEY environment variable.")
Sys.setenv(AIRTABLE_API_KEY = key)
if(return_key) return(key)
}
library(openmindR)
set_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
usethis::edit_r_environ()
Sys.getenv("AIRTABLE_API_KEY")
#' @export
set_AT_key <- function(api_key, omkey_path, return_key = F) {
if(api_key != Sys.getenv("AIRTABLE_API_KEY")) stop("AirTable API Key already set.")
omkey <- readRDS(omkey_path)
decipher <- sodium::hex2bin(api_key)
key <- unserialize(sodium::data_decrypt(bin = decipher, key = omkey, nonce = public_nonce))
# message("Setting API key as AIRTABLE_API_KEY environment variable.")
Sys.setenv(AIRTABLE_API_KEY = key)
if(return_key) return(key)
}
library(openmindR)
set_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
set_AT_key(Sys.getenv("AIRTABLE_API_KEY"), Sys.getenv("OMKEY"))
devtools::install_github("openmindplatform/openmindR")
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
ininstall.packages("purrr")
install.packages("purrr")
library(purrr)
devtools::document()
install.packages("purrr")
devtools::document()
devtools::install_github("openmindplatform/openmindR")
pacman::p_load(tidyverse, openmindR)
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
## Get Key (may differ in your code)
## get v7 data
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
## Get Key (may differ in your code)
## get v7 data
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
## Get Key (may differ in your code)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
devtools::load_all()
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AccessCodes",
clean = TRUE)
devtools::load_all()
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AccessCodes",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AccessCodes",
clean = TRUE)
devtools::load_all()
devtools::load_all()
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AccessCodes",
clean = TRUE)
## get v7 data
assessmentv7 <- om_download_at(#key,
tables = "AssessmentV7",
clean = TRUE)
assessmentv7
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv7
assessmentv7 %>%
filter(AssessmentVersion == "7.2")
assessmentv7 %>%
filter(AssessmentVersion == 7.2)
dplyr::filter(AssessmentVersion == 7.2)
assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
select_if(~!all(is.na(.)))
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
assessmentv72
library(tidyverse)
assessmentv72
assessmentv72$Contempt1Pre
assessmentv72 %>%
select(Contempt1Pre)
assessmentv72 %>%
select(Contempt1Pre, Contempt2Pre) %>%
ggplot(aes(Contempt1Pre, Contempt2Pre)) +
geom_point() +
geom_smooth()
assessmentv72 %>%
select(Contempt1Pre, Contempt2Pre) %>%
ggplot(aes(Contempt1Pre, Contempt2Pre)) +
geom_jitter() +
geom_smooth()
assessmentv72 %>%
select(Contempt1Pre, Contempt2Pre) %>%
mutate(Contempt1Pre = 8-Contempt1Pre) %>%
ggplot(aes(Contempt1Pre, Contempt2Pre)) +
geom_jitter() +
geom_smooth()
devtools::load_all()
devtools::load_all()
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
dplyr::select_if(~!all(is.na(.)))
devtools::load_all()
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
dplyr::select_if(~!all(is.na(.)))
devtools::load_all()
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
debugonce(om_download_at)
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
# debugonce(om_download_at)
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
debugonce(clean_assessment7)
# debugonce(clean_assessment7)
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
devtools::load_all()
# debugonce(clean_assessment7)
assessmentv7 <- om_download_at(
tables = "AssessmentV7",
clean = TRUE)
assessmentv72 <- assessmentv7 %>%
dplyr::filter(AssessmentVersion == 7.2) %>%
dplyr::select_if(~!all(is.na(.)))
assessmentv72 %>%
select(Contempt1Pre, Contempt2Pre) %>%
mutate(Contempt1Pre = 8-Contempt1Pre) %>%
ggplot(aes(Contempt1Pre, Contempt2Pre)) +
geom_jitter() +
geom_smooth()
assessmentv72
p2p_dat <- om_download_at(tables = "P2P",
clean = TRUE)
p2p_dat
p2p_dat
p2p_dat <- om_download_at(tables = "P2P",
clean = TRUE)
p2p_dat
devtools::load_all()
p2p_dat <- om_download_at(tables = "P2P",
clean = TRUE)
p2p_dat
assessmentv72 %>%
left_join(p2p_dat)
devtools::load_all()
p2p_dat <- om_download_at(tables = "P2P",
clean = TRUE)
assessmentv72 %>%
left_join(p2p_dat)
devtools::load_all()
p2p_dat <- om_download_at(tables = "P2P",
clean = TRUE)
assessmentv72 %>%
left_join(p2p_dat)
devtools::document()
devtools::document()
devtools::install()
