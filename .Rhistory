)
# Chunk 21
Q3_dat_plot_Maybe <- Q3_dat_plot %>%
filter(Q3 == "Maybe")
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q3_dat_plot_Maybe$type)) %>%
hc_add_series(Q3_dat_plot_Maybe, "column", hcaes(x = UserType, y = perc, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7))%>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}%") %>%
hc_title(
text = "Users who would MAYBE recommend OpenMind by User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
max = 110,
align = "left",
title = list(text = "Percentage"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}%')
)
)
# Chunk 22
Q3_dat_plot_No <- Q3_dat_plot %>%
filter(Q3 == "No")
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(Q3_dat_plot_No$type)) %>%
hc_add_series(Q3_dat_plot_No, "column", hcaes(x = UserType, y = perc, group = UserType)) %>%
hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7))%>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_tooltip(pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}%") %>%
hc_title(
text = "Users who would NOT recommend OpenMind by User Type"
) %>%
hc_legend(enabled = T, align = "left", verticalAlign = "top",
layout = "horizontal", x = 60, y = 50,
floating = T, itemStyle = list(
color = 'black',
fontSize = "11px"
)) %>%
hc_yAxis(
max = 110,
align = "left",
title = list(text = "Percentage"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}%')
)
)
# Chunk 23
selectInput("type", label = "AccessCode", choices = c("FreedmanCMUF18", "EddySalemStateUniversityF18t",
"MurraySouthernMethodistUniversityF18", "CohenGeorgiaStateUniversityF18",
"HagerlandUofGothenburgF18", "EddySalemStateUniversityF18p",
"CadiganBostonUniversityF18", "EddySalemStateUniversityF18s",
"EddySalemStateUniversityF18r", "PhillipsPennStateBrandywineF18",
"HollandWorcesterStateU.F18", "CAAPeerTutors2018", "MeelerWinthropF18",
"LiuUWWhitewaterF18", "CassellASUF18", "EddySalemStateUniversityF18",
"lagrandMessiahCollegeF18", "BeckerCommunityCollegeofDenverF18",
"WallstenCSULBF18", "RichardsMidlandCollegeF18", "AmatoBostonUniversityF18",
"SuttonBirminghamSouthernCollegeF18", "GadeAmericanUniversityS19"
))
# Chunk 24
renderHighchart({acc_sankey(dat.acc, dat.ass, input$type)})
# #2a98db
## TODO: Figure out when to use GT Data and Airtable data
## TODO: Add Apprating
library(flexdashboard)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(shiny)
library(tidyverse)
library(pander)
library(effsize)
library(data.table)
library(Rmisc)
library(extrafont)
library(extrafontdb)
library(scales)
library(sjmisc)
library(xts)
library(magrittr)
library(glue)
library(openmindR)
library(tidytemplate)
library(highcharter)
library(lubridate)
library(ggrepel)
library(knitr)
library(plotly)
library(glue)
library(airtabler)
panderOptions('digits', 3)
panderOptions('round', 3)
panderOptions('keep.trailing.zeros', TRUE)
user_followup_assessment <- load_it("../data/user_followup_assessment.Rdata")
gt_parsed_feedback <- load_it("../data/gt_parsed_feedback.Rdata") %>%
mutate_at(vars(Step1_Q2, Step2_Q2, Step3_Q2, Step4_Q2, Step5_Q2), as.numeric)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
dat.acc <- load_it("../data/acc.RData")
dat.par <- load_it("../data/par.RData")
dat.ass <- load_it("../data/ass.RData")
## Matching string for all Q variables
q_strings <- paste0("Q", 1:12, collapse = "|")
## Matching string for all C variables
c_strings <- paste0("C", 1:3, collapse = "|")
# loading and basic cleaning of dataframe
app.dat <- load_it("../data/cleaned_dat.Rdata")
# gathered_dat <- load_it("../data/gathered_dat.Rdata") %>%
#      mutate(variable_code = str_remove(Question, Type))
basicsummarystats <- load_it("../data/basicsummarystats.Rdata")
plot_dat <- load_it("../data/plot_dat.Rdata")
## Matching string for all Q variables
q_strings <- paste0("Q", 1:12, collapse = "|")
prop_miss <- function(data) {
final_dat <- data %>%
select(matches(q_strings)) %>%
# arrange(desc(Q3Followup)) %>%
mutate_at(vars(matches(q_strings)), ~ifelse(is.na(.x), 0, 1)) %>%
# mutate_at(vars(matches(q_strings)), as.factor) %>%
summarise_all(sum) %>% t %>% as.data.frame() %>%
rownames_to_column("variable") %>%
dplyr::rename(ncum = V1) %>%
mutate(n = nrow(data)) %>%
mutate(nmiss = n - ncum) %>%
mutate(propmiss = nmiss / n) %>%
mutate(type = case_when(
str_detect(variable, "Pre") ~ "Pre",
str_detect(variable, "Post") ~ "Post",
str_detect(variable, "Followup") ~ "Followup"
)) %>%
mutate(variable_code = str_remove(variable, type)) %>%
arrange(variable_code, desc(type), nmiss) %>%
group_by(variable_code) %>%
mutate(nmiss_q = sum(nmiss)) %>%
arrange(nmiss_q, parse_number(variable_code)) %>%
ungroup()
return(final_dat)
}
acc_sankey <- function(dat.acc, dat.ass, acccode) {
acc_research <- dat.acc %>%
filter(Research %in% c("FUM", "RCTA")) %>%
mutate(AdminName = str_c(AdminFirstName, " ",AdminLastName)) %>%
select(AdminName, AccessCode, GroupName, AdminEmail, NumberMembers, Research)
ss <- acc_research %>%
inner_join(dat.ass) %>%
filter(AccessCode == acccode)
if (nrow(ss) == 0) {
# return(print("No data for this AccessCode"))
return(renderPrint({ "No data for this AccessCode" }))
}
cum_missing <- prop_miss(ss)
min_miss_var <- cum_missing %>% slice(1) %>% pull(variable_code)
sankey_dat <- get_sankey_dat(ss, min_miss_var)
hchart(sankey_dat, "sankey", hcaes(from = from, to = to, weight = weight)) %>%
hc_exporting(
enabled = TRUE
)  %>%
hc_add_theme(theme_hc_om)  %>%
hc_colors(pal_om(7)) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_title(
text = "Pre- Post- and Follow Up Attrition"
)
}
get_sankey_dat <- function(data, which_var){
# which_var <- "Q1"
which_var <- paste0(which_var, c("P", "F"), collapse = "|")
wanna_keeps <- data %>% select(matches(which_var)) %>% colnames()
sankey_raw <- data %>%
select(OMID, AccessCode, AssessmentsDone, matches(which_var)) %>%
# arrange(desc(Q3Followup)) %>%
mutate_at(vars(matches(which_var)), ~ifelse(is.na(.x), 0, 1)) %>%
mutate_at(vars(matches(which_var)), as.factor) %>%
count_(wanna_keeps) %>%
unite("PrePostFollow", wanna_keeps, sep = "") %>%
filter(#PrePostFollow != "000",
PrePostFollow != "010",
PrePostFollow != "001",
PrePostFollow != "011",
PrePostFollow != "101"
) %>%
mutate(total = sum(n)) %>%
arrange(desc(PrePostFollow)) %>%
mutate(cum_n = cumsum(n)) %>%
mutate(rev_cum_n = rev(cum_n))
if ("000" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "000"))
}
if ("100" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "100", cum_n = sankey_raw$total %>% na.omit %>% extract(1)))
}
if ("111" %nin% sankey_raw$PrePostFollow) {
sankey_raw <- sankey_raw %>%
bind_rows(tibble(PrePostFollow = "111", cum_n = 0))
}
sankey_dat <- bind_rows(
## Recruited
sankey_raw %>%
filter(PrePostFollow == "000") %>%
mutate(from = "Recruited",
to = "Start",
weight = nrow(data)) %>%
select(from, to, weight),
## Pre
sankey_raw %>%
filter(PrePostFollow == "100") %>%
mutate(from = "Start",
to = "Pre",
weight = cum_n) %>%
select(from, to, weight),
## Post
sankey_raw %>%
filter(PrePostFollow == "110") %>%
mutate(from = "Pre",
to = "Post",
weight = cum_n) %>%
select(from, to, weight),
## Follow Up
sankey_raw %>%
filter(PrePostFollow == "111") %>%
mutate(from = "Post",
to = "Follow Up",
weight = cum_n) %>%
select(from, to, weight) %>%
mutate(weight = sum(weight)) %>%
slice(1)
)
return(sankey_dat)
}
theme_hc_om <- openmindR::get_hc_theme_om()
dat.acc <- load_it("../data/acc.RData")
devtools::install_github("favstats/openmindR")
devtools::install_github("favstats/openmindR")
install.packages("backports")
install.packages("backports")
devtools::install_github("favstats/openmindR")
#' Creates the following measures
#' \itemize{
#'   \item StepTimes1 to StepTimes5: Duration in minutes to complete a step
#'   \item StepCorrect1 to StepCorrect5: Percentage of correct answers for each step
#'   \item FeedbackAnswers Q1 to Q5
#' }
#'
#' @param dat.par ParticipantProgress data from AirTable
#' @param ... Arguments for select to get more from ParticipantProgress
#' @export
om_clean_par <- function(dat.par, ...) {
dat.par %>%
## seperating brackets and cleaning up
separate(StepsComplete, into = paste("StepsComplete", 1:5, sep = ""), remove = F) %>%
separate(StepScores, into = paste("StepsScores", 1:5, sep = "")) %>%
separate(StepQuestionTotals, into = paste("StepQuestionTotals", 1:5, sep = "")) %>%
separate(StepTimes, into = paste("StepTimes", 1:5, sep = ""),
sep = ",", remove = F) %>%
## Clean up seperated vars
mutate_at(vars(StepTimes1:StepTimes5), ~str_remove_all(.x, "[^[:digit:]. ]") %>% parse_number) %>%
mutate_at(vars(StepTimes1:StepTimes5), ~ifelse(.x == 0, NA, .x)) %>%
## Making columns numeric where they need to be
mutate_at(vars(StepsComplete1:StepQuestionTotals5, AppRating), as.numeric)  %>%
# ## Steps Complete
## Now calculating scores
## percent correct for each step
mutate(StepCorrect1 = calc_correct(StepsComplete1, StepsScores1, StepQuestionTotals1)) %>%
mutate(StepCorrect2 = calc_correct(StepsComplete2, StepsScores2, StepQuestionTotals2)) %>%
mutate(StepCorrect3 = calc_correct(StepsComplete3, StepsScores3, StepQuestionTotals3)) %>%
mutate(StepCorrect4 = calc_correct(StepsComplete4, StepsScores4, StepQuestionTotals4)) %>%
mutate(StepCorrect5 = calc_correct(StepsComplete5, StepsScores5, StepQuestionTotals5)) %>%
## Parse Feedback Answers
mutate(data = FeedbackAnswers %>%
map(~parse_feedback_at(.x))) %>%
unnest(data)  %>%
## Make Step variables to characters (for merging)
mutate_at(vars(Step1:Step5_Q5), as.character) %>%
select(OMID, StepTimes, StepsComplete, StepCorrect1:StepCorrect5, StepTimes1:StepTimes5, Step1:Step5_Q5,
FeedbackAnswers, FeedbackAnswersVariableNames, AppRating, AppRecommend, at_date, ...)
}
devtools::document()
devtools::document()
?om_gather
devtools::document()
?om_gather
devtools::document()
?om_gather
devtools::document()
?om_gather
dat.ass %>%
om_gather()
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(tidyverse)
library(DBI)
library(magrittr)
library(glue)
library(lubridate)
db_get_data <- function(tbl_dat) {
con <- dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
tbl(tbl_dat) %>%
collect()
dbDisconnect(con)
return(out)
}
## Matching string for all Q variables
q_strings <- paste0(
paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
)
## Matching string for all (relevant) D variables
d_strings <- paste0("D", 1, collapse = "|")
## Matching string for all C variables
c_strings <- paste0("C", 1:3, collapse = "|")
## Matching string for all (relevant) D, Q and C variables
var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
## Matching string for all Q and C variables
q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
## Matching string for ranging vars from 0 to 1
range01_strings <- str_c(str_c("Q", 3:12, "P", collapse = "|"), "|",
str_c("Q", 3:12, "F", collapse = "|"),
str_c("|", c_strings, collapse = "|")
)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
rename_at(vars(matches("Followup")), ~str_replace(., "Followup", "FollowUp")) %>%
bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather()
dat.ass %>%
om_gather(q_c_strings)
dat.ass %>%
om_gather(q_c_strings) %>%
select(Question, Response, Type, variable_code)
devtools::document()
remotes::install_github("openmindplatform/openmindR")
gathered_dat <- dat.ass %>%
om_gather(q_c_strings)
devtools::document()
devtools::install_github("openmindplatform/openmindR")
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(tidyverse)
library(DBI)
library(magrittr)
library(glue)
library(lubridate)
library(sjmisc)
db_get_data <- function(tbl_dat) {
con <- dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
tbl(tbl_dat) %>%
collect()
dbDisconnect(con)
return(out)
}
## Matching string for all Q variables
q_strings <- paste0(
paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
)
## Matching string for all (relevant) D variables
d_strings <- paste0("D", 1, collapse = "|")
## Matching string for all C variables
c_strings <- paste0("C", 1:3, collapse = "|")
## Matching string for all (relevant) D, Q and C variables
var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
## Matching string for all Q and C variables
q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
## Matching string for ranging vars from 0 to 1
range01_strings <- str_c(str_c("Q", 3:12, "P", collapse = "|"), "|",
str_c("Q", 3:12, "F", collapse = "|"),
str_c("|", c_strings, collapse = "|")
)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
rename_at(vars(matches("Followup")), ~str_replace(., "Followup", "FollowUp")) %>%
bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
select(Question, Response, Type, variable_code)
gathered_dat <- dat.ass %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons()
gathered_dat %>%
om_construct_measures() %>%
om_summarize_comparisons()
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons()
gathered_dat
gathered_dat %>% count(variable_code)
gathered_dat %>% #count(variable_code)
om_summarize_comparisons()
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>% #count(variable_code)
om_summarize_comparisons()
devtools::document()
gathered_dat %>% #count(variable_code)
om_summarize_comparisons() %>%
arrange(variable_code)
