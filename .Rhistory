## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate scores where Moderates need to be excluded
no_moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %in% c("Q15", "Q16", "Q17")) %>%
tidyr::drop_na(ppol_cat) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithoutModerates")
final_compared_prepost <- moderate_dat_prepost %>% dplyr::bind_rows(no_moderate_dat_prepost)
## PreFollow Data
compare_dat_prefollow <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "FollowUp")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "FollowUp"))) %>%
## count OMIDs and PreFollow Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prefollow <- compare_dat_prefollow %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PreFollow
openmindR::bind_questions(waves = "PreFollow") %>%
dplyr::mutate(Comparison = "PreFollow") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate scores where Moderates need to be excluded
no_moderate_dat_prefollow <- compare_dat_prefollow  %>%
dplyr::filter(variable_code %in% c("Q15", "Q16", "Q17")) %>%
tidyr::drop_na(ppol_cat) %>%
## PreFollow
openmindR::bind_questions(waves = "PreFollow") %>%
dplyr::mutate(Comparison = "PreFollow") %>%
## add indicator
dplyr::mutate(moderates = "WithoutModerates")
final_compared_prefollow <- moderate_dat_prefollow %>% dplyr::bind_rows(no_moderate_dat_prefollow)
final_compared <- final_compared_prepost %>% dplyr::bind_rows(final_compared_prefollow)
final_compared
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par(parse_feedback = T)
dat.ass %>%
om_rescale()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
om_label_stats(gathered_dat, aversion = "V4")
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
Q11_dat <- om_mix_models(gathered_dat,
question = "Q11",
plot_model = T,
get_effects = T,
get_tidy = T)
Q11_dat$ggmod
Q11_dat$effects_dat %>%
knitr::kable()
Q11_dat$tidy_dat %>%
knitr::kable()
Q11_dat$lme_dat
om_mix_plot(effects_dat = Q11_dat$effects_dat,
tidy_dat = Q11_dat$tidy_dat,
var_label = "Growth Mindset",
show_stats = T)
om_mix_complete(gathered_dat, "Growth Mindset")
Q11_dat$ggmod
Q11_dat$ggmod
Q11_dat$ggmod
Q11_dat$ggmod
install.packages("rmarkdown")
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
library(openmindR)
?om_summarize_comparisons
devtools::document()
devtools::document()
?om_summarize_comparisons
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
library(openmindR)
library(dplyr)
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
Q11_dat <- om_mix_models(gathered_dat,
question = "Q11",
plot_model = T,
get_effects = T,
get_tidy = T)
Q11_dat$lme_dat
Q11_dat$ggmod
Q11_dat$effects_dat
Q11_dat$tidy_dat
om_mix_plot(effects_dat = Q11_dat$effects_dat,
tidy_dat = Q11_dat$tidy_dat,
var_label = "Growth Mindset",
show_stats = T)
om_mix_plot(effects_dat = Q11_dat$effects_dat,
tidy_dat = Q11_dat$tidy_dat,
var_label = "Growth Mindset",
show_stats = F)
om_mix_plot(effects_dat = Q11_dat$effects_dat,
tidy_dat = Q11_dat$tidy_dat,
var_label = "Growth Mindset",
show_stats = T)
om_mix_complete(gathered_dat, "Growth Mindset")
#' Run mixed effects model
#'
#' This function performs mixed models (Currently only works on Ann Miller experimental data)
#' @param gathered_dat Assessment data as long format
#' @param question Specify question that you want to perform analysis for (ex: \code{"Q18"})
#' @param plot_model logical. Show a coefficient plot of the model. Default is \code{FALSE}
#' @param get_effects logical. Get marginal effects. Default is \code{FALSE}
#' @param get_tidy logical. Get a tidy dataframe with estimates. Also calculates pseudo cohen's d efecct sizes. Default is \code{FALSE}
#' @export
om_mix_models <- function(gathered_dat, question, plot_model = F, get_effects = F, get_tidy = F) {
# question <- "Q18"
# is.data.frame(mods_dat2)
browser()
## some data wrangling
mods_dat <- gathered_dat %>%
dplyr::filter(variable_code == question) %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
dplyr::mutate(Condition = as.factor(Condition)) %>%
dplyr::mutate(Type = as.factor(Type)) %>%
dplyr::mutate(OMID = as.factor(OMID)) %>%
tidyr::drop_na(Response) %>%
dplyr::add_count(OMID) %>%
dplyr::filter(n == 2) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
base::as.data.frame()
## Assign to a symbol that's unlikely to be in use in .GlobalEnv
## (and make sure this function cleans up after itself!)
assign(".TeMpVaR", mods_dat, envir = globalenv())
on.exit(rm(.TeMpVaR, envir = globalenv()))
## getting unique IDs we will need this for calculating pseudo cohens d
individs <- mods_dat %>% dplyr::distinct(OMID) %>% nrow
## Run model
lme_dat <- lme4::lmer(Response ~ Condition*Type +(1+Condition|OMID) + (1+Type|OMID),
data = .TeMpVaR, REML = F,
control = lme4::lmerControl(check.nobs.vs.nRE = "ignore"))
final <- list(lme_dat = lme_dat)
if (plot_model) {
## get coefficient plot for model
ggmod <- lme_dat %>%
sjPlot::plot_model(type = "std", show.p = T, show.values = T)# +
# ggplot2::theme_minimal()
final <- rlist::list.append(final, ggmod = ggmod)
}
if (get_effects) {
### This tells R to give the AP estimate at levels of Time and Ideology that we
### specify. In this example we want an estimate of AP for each level of time
### (Pre, Post, Follow-up) plotted at 1 sd below (liberal) and above
### (conservative) the midpoint (4) for ideology. It uses the info from mod1
### above to adjust for the within subjects variance we're throwing out.
effects_dat <- ggeffects::ggeffect(lme_dat, c("Condition", "Type" ),
x.as.factor = T,
ci.lvl = .95,
typical = "mean") %>%
### Now we turn both of these into factors to make plots easier (i.e. add labels
### and make sure time is in the right order, not graphed alphabetically)
dplyr::mutate(Condition = factor(x,  levels = c("Article","OpenMind"))) %>%
dplyr::mutate(Type = factor(group, levels = c("Pre", "Post")))
final <- rlist::list.append(final, effects_dat = effects_dat)
}
if (get_tidy) {
## get tidy dataframe
coefs <- broom::tidy(lme_dat) %>%
dplyr::filter(group == "fixed") %>%
dplyr::mutate(n_coef = nrow(.)) %>%
dplyr::mutate(n_dat = individs) %>%
## calculate pseudo cohens d
dplyr::mutate(d = abs(estimate/(sqrt(n_dat - n_coef)*std.error)))
final <- rlist::list.append(final, tidy_dat = coefs)
}
return(final)
}
Q11_dat <- om_mix_models(gathered_dat,
question = "Q11",
plot_model = T,
get_effects = T,
get_tidy = T)
## some data wrangling
mods_dat <- gathered_dat %>%
dplyr::filter(variable_code == question) %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
dplyr::mutate(Condition = as.factor(Condition)) %>%
dplyr::mutate(Type = as.factor(Type)) %>%
dplyr::mutate(OMID = as.factor(OMID)) %>%
tidyr::drop_na(Response) %>%
dplyr::add_count(OMID) %>%
dplyr::filter(n == 2) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
base::as.data.frame()
mods_dat
mods_dat
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
install.packages("installr")
install.packages("installr")
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
update.packages(ask = FALSE, checkBuilt = TRUE)
# Download pandoc 2.7.1 built with ghc-8.6.4, and instruct
# RStudio + rmarkdown to use it.
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
devtools::document()
?om_download_at
?om_download_at
devtools::document()
?om_download_at
#' + `"AssessmentV4"`
#' + `"AssessmentV5"`
#' + `"AccessCodes"`
#' + `"ParticipantProgress"`
#' + `"InstructorSurvey"`
#' + `"TechnicalInquiries"`
#'
#'@param key key for AirTable API
#'@param tables specify which tables you want to download
#'@return a list with (several) dataframe(s)
om_download_at <- function(key, tables = c("AssessmentV4", "AssessmentV5","AccessCodes","ParticipantProgress","InstructorSurvey", "TechnicalInquiries")) {
cat("Seting up key\n")
Sys.setenv(AIRTABLE_API_KEY = key)
AIRTABLE_API_KEY = key
dat.ass.1 <- airtabler::airtable(
base = "appjU7KUyybZ4rGvT",
tables = tables
)
final_list <- list()
#### downloads full data table ####
if ("AssessmentV4" %in% tables) {
cat("Download AssessmentV4 Data\n")
final_list$dat.ass4 <- dat.ass.1$AssessmentV4$select_all()
cat(paste0("Done. AssessmentV4 Data has ", nrow(final_list$dat.ass4), " rows\n"))
}
if ("AssessmentV5" %in% tables) {
cat("Download AssessmentV5 Data\n")
final_list$dat.ass5 <- dat.ass.1$AssessmentV5$select_all()
cat(paste0("Done. AssessmentV5 Data has ", nrow(final_list$dat.ass5), " rows\n"))
}
if ("AccessCodes" %in% tables) {
cat("Download AccessCodes Data\n")
final_list$dat.acc <- dat.ass.1$AccessCodes$select_all()
cat(paste0("Done. AccessCodes Data has ", nrow(final_list$dat.acc), " rows\n"))
}
if ("ParticipantProgress" %in% tables) {
cat("Download Participant Progress Data\n")
final_list$dat.par <- dat.ass.1$ParticipantProgress$select_all()
cat(paste0("Done. Participant Progress Data has ", nrow(final_list$dat.par), " rows\n"))
}
if ("InstructorSurvey" %in% tables) {
cat("Download Instructor Survey Data\n")
final_list$dat.ins <- dat.ass.1$InstructorSurvey$select_all()
cat(paste0("Done. Instructor Survey Data has ", nrow(final_list$dat.ins), " rows\n"))
}
if ("TechnicalInquiries" %in% tables) {
cat("Download Technial Inquiries Data\n")
final_list$dat.tec <- dat.ass.1$TechnicalInquiries$select_all()
cat(paste0("Done. Technical Inquiries Data has ", nrow(final_list$dat.tec), " rows\n"))
}
if (length(tables) == 1) final_list <- final_list %>% magrittr::extract2()
return(final_list)
}
devtools::document()
?om_download_at
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?om_mix_complete
