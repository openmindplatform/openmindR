dplyr::count(..., .drop = F)
}
panderOptions('digits', 3)
panderOptions('round', 3)
panderOptions('keep.trailing.zeros', TRUE)
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
rename_at(vars(matches("Followup")), ~str_replace(., "Followup", "FollowUp")) %>%
bind_rows(dat.ass5)
# loading and basic cleaning of dataframe
app.dat <- db_get_data("cleaned_dat")
app.dat <- app.dat %>%
mutate(GroupName = case_when(
GroupName == "WilkesU" ~ "WilkesU",
GroupName == "WilkesUniversity" ~ "WilkesU",
GroupName == "wilkesU" ~ "WilkesU",
T ~ GroupName
))
basicsummarystats <- db_get_data("basicsummarystats")  %>%
mutate(percentimproved = round(100 * percentimproved, 2)) %>%
mutate(pval = tidytemplate::get_plabs(pvalue)) %>%
mutate(tlab = glue("t({round(df, 2)}) = {round(tstat, 2)}, {pval}"))
plot_dat <- db_get_data("plot_dat")
# theme_hc_om <- openmindR::get_hc_theme_om()
basicsummarystats <- db_get_data("basicsummarystats")  %>%
mutate(percentimproved = round(100 * percentimproved, 2)) %>%
mutate(pval = tidytemplate::get_plabs(pvalue)) %>%
mutate(tlab = glue("t({round(df, 2)}) = {round(tstat, 2)}, {pval}"))
basicsummarystats
# Chunk 1: global
# #2a98db
## TODO: clean up groupnames
## Done for Wilkes! But probably needs to be added in cleaning script
source("99_helper.R")
library(flexdashboard)
pal_om <- scales::manual_pal(c("#2a98db", "#3d4fa1",
"#e8df15", "#65c6c3",
"#ec145b", "#94cfa1",
"#414042"))
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(shiny)
library(pander)
library(effsize)
library(data.table)
library(extrafont)
library(extrafontdb)
library(scales)
library(sjmisc)
library(xts)
library(magrittr)
library(glue)
library(openmindR)
library(tidytemplate)
library(highcharter)
library(lubridate)
library(ggrepel)
library(knitr)
library(glue)
library(RSQLite)
library(magrittr)
library(shinyWidgets)
library(tidyverse)
count <- function(...){
dplyr::count(..., .drop = F)
}
panderOptions('digits', 3)
panderOptions('round', 3)
panderOptions('keep.trailing.zeros', TRUE)
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
rename_at(vars(matches("Followup")), ~str_replace(., "Followup", "FollowUp")) %>%
bind_rows(dat.ass5)
# loading and basic cleaning of dataframe
app.dat <- db_get_data("cleaned_dat")
app.dat <- app.dat %>%
mutate(GroupName = case_when(
GroupName == "WilkesU" ~ "WilkesU",
GroupName == "WilkesUniversity" ~ "WilkesU",
GroupName == "wilkesU" ~ "WilkesU",
T ~ GroupName
))
basicsummarystats <- db_get_data("basicsummarystats")  %>%
mutate(percentimproved = round(100 * percentimproved, 2)) %>%
mutate(pval = tidytemplate::get_plabs(pvalue)) %>%
mutate(tlab = glue("t({round(df, 2)}) = {round(tstat, 2)}, {pval}"))
plot_dat <- db_get_data("plot_dat")
# theme_hc_om <- openmindR::get_hc_theme_om()
# Chunk 2
prettyRadioButtons(inputId = "groupvar1",
label = "Group By",
choices = c("UserType", "Age", "Gender",
"Race/Ethnicity", "Political Affiliation",
"Religion", "Country"),
inline = F, selected = "UserType")
prettyRadioButtons(inputId = session$ns("steps_switch"),
label = "Steps Completed",
choices = c("At least one Step", "All Five Steps"),
inline = F, selected = "At least one Step")
# Chunk 3
datetime <- read_lines("log_file.txt") %>%
.[length(.)]
# shinyjs::hidden(div(id = 'loading'))
#
# shiny::actionButton("waitwhat", "Update Data")
#
#
#
# do_it <- function(variables) {
#   if(variables != 0) {
#
#     showModal(modalDialog(
#         title = "Thank you for trying out this feature.",
#         fade = T,
#         # "Getting Newest data - This might take a few seconds",
#         "Unfortunately this feature is not implemented yet. Please contact your friendly neighborhood shiny app developer.",
#         easyClose = TRUE,
#         footer = NULL
#         )
#       )
#   }
# }
#
#   observeEvent(input$waitwhat, {
#     do_it(input$waitwhat)
#   })
#
# Chunk 4
renderHighchart({plot_n_overtime("Individual Users", input$groupvar1,
input$steps_switch,
dat.acc, dat.par)})
# plot_n_overtime("Individual Users", "UserType", "At least one step", dat.acc, dat.par)
# plot_n_overtime("Access Codes", "Country", "At least one step", dat.acc, dat.par)
# Chunk 5
prettyRadioButtons("percornot", label = "Steps", choices = c("Percent Completed", "One vs. Five Completed"))
renderUI({
if (input$percornot == "One vs. Five Completed") {
prettyRadioButtons(session$ns("cum_step"),
label = "Select Aggregation",
choices = c("Cumulative", "By Month"),
selected = "Cumulative")
}
})
# Chunk 6
steps_complete_dat <- app.dat %>%
arrange(steps_complete) %>%
filter(steps_complete != 0) %>%
mutate(steps_complete_bin = ifelse(steps_complete %in% 1:4, "At least one", "All Five")) %>%
count(steps_complete_bin) %>%
mutate(total = sum(n)) %>%
mutate(perc = (n/total)*100) %>%
filter(steps_complete_bin == "All Five")
dat.tec <- db_get_data("dat.tec") %>% drop_na(MonthBeginning) %>%
mutate(MonthYear = as.Date(MonthBeginning) %>% floor_date("month")) %>%
mutate(tech_inquiries = TechnicalInquiriesReceived %>% as.numeric()) %>%
select(MonthYear, tech_inquiries)
# Chunk 7
# hc_steps_complete("Percent Completed", app.dat)
renderHighchart({hc_steps_complete(input$percornot, input$cum_step, app.dat, dat.tec)})
# Chunk 8
step_duration <-
bind_rows(
app.dat %>%
select(StepTimes1:StepTimes5) %>%
mutate_at(vars(StepTimes1:StepTimes5), ~ifelse(.x > 50 | .x < 5, NA, .x)) %>%
summarize_all(~median(.x, na.rm = T)) %>%
gather() %>% mutate(Type = "Median"),
app.dat %>%
select(StepTimes1:StepTimes5) %>%
mutate_at(vars(StepTimes1:StepTimes5), ~ifelse(.x > 50 | .x < 5, NA, .x)) %>%
summarize_all(~mean(.x, na.rm = T)) %>%
gather() %>% mutate(Type = "Mean")
) %>%
mutate(key = case_when(
key == "StepTimes1" ~ "Step 1",
key == "StepTimes2" ~ "Step 2",
key == "StepTimes3" ~ "Step 3",
key == "StepTimes4" ~ "Step 4",
key == "StepTimes5" ~ "Step 5"
)) #%>%
# mutate(color = pal_om(5))
step_duration_ut <- bind_rows(
app.dat %>%
select(StepTimes1:StepTimes5, UserType) %>%
mutate_at(vars(StepTimes1:StepTimes5), ~ifelse(.x > 50 | .x < 5, NA, .x)) %>%
group_by(UserType) %>%
summarize_all(~median(.x, na.rm = T)) %>%
gather(key, value, -UserType) %>% mutate(Type = "Median"),
app.dat %>%
select(StepTimes1:StepTimes5, UserType) %>%
mutate_at(vars(StepTimes1:StepTimes5), ~ifelse(.x > 50 | .x < 5, NA, .x)) %>%
group_by(UserType) %>%
summarize_all(~mean(.x, na.rm = T)) %>%
gather(key, value, -UserType) %>% mutate(Type = "Mean")
) %>% mutate(UserType = case_when(
UserType == "college" ~ "College Users",
UserType == "corp" ~ "Corporate Users",
UserType == "highschool" ~ "High School Users",
UserType == "orgadult" ~ "Adult Organization Users",
UserType == "orgstudent" ~ "College Organization Users",
UserType == "IndividualUser" ~ "Individual Users",
T ~ UserType
))
# Chunk 9
step_duration %>%
rename(Measure = Type) %>%
group_by(Measure) %>%
summarise(`Total Time (in minutes)` = round(sum(value), 1)) %>%
kable()
# Chunk 10
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(step_duration$key)) %>%
hc_add_series(step_duration, "column", hcaes(x = key, y = value, group = Type)) %>%
# hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7)) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5,
pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}") %>%
hc_legend(enabled = F) %>%
hc_title(
text = str_glue("Step Completion Duration (in Minutes)")
) %>%
hc_yAxis(
align = "left",
title = list(text = "Duration in Minutes"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.1f}')
)
)
# Chunk 11
highchart() %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = unique(step_duration_ut$UserType)) %>%
hc_add_series(step_duration_ut, "column", hcaes(x = UserType, y = value, group = key)) %>%
# hc_add_theme(theme_hc_om) %>%
hc_colors(pal_om(7)) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5,
pointFormat = "<b>{series.name}:<b/> {point.y:,.2f}") %>%
hc_legend(enabled = F) %>%
hc_title(
text = str_glue("Step Completion Duration (in Minutes)")
) %>%
hc_yAxis(
align = "left",
title = list(text = "Duration in Minutes"),
showLastLabel = FALSE
) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.1f}')
)
)
# Chunk 12
# prettyRadioButtons("percornot2", label = "Steps", choices = c("Complete", "By User Type", "Steps Complete"))
prettyRadioButtons(inputId = "percornot2",
label = "Display",
choices = c("Overall",
"By AccessCode",
"By GroupName"),
inline = F, selected = "Overall")
renderUI({
if (input$percornot2 == "By AccessCode") {
selectInput(session$ns("acc_code1"),
label = "AccessCode",
choices = unique(app.dat$AccessCode),
selected = "IndividualUser")
} else if (input$percornot2 == "By GroupName") {
selectInput(session$ns("acc_code2"),
label = "GroupName",
choices = unique(app.dat$GroupName) %>% na.omit)
}
})
# Chunk 13
# theme_hc_om <- get_hc_theme_om()
# hc_acc_sankeys(app.dat, "By AccessCode", "IndividualUser")
#
#
# hc_acc_sankeys(app.dat, "Overall")
renderHighchart({
hc_acc_sankeys(app.dat, input$percornot2, input$acc_code1, input$acc_code2)
})
# Chunk 14
prettyRadioButtons(inputId = "groupvar2",
label = "Group By",
choices = c("UserType", "Country", "Research"),
inline = F, selected = "UserType")
prettyRadioButtons(inputId = "acc_switch",
label = "Filter Access Codes",
choices = c("2 Users + Future Use", "All Access Codes"),
inline = F, selected = "2 Users + Future Use")
dat_acc <- dat.acc %>%
left_join(dat.par %>% select(AccessCode)) %>%
add_count(AccessCode, sort = T) %>%
rename(n_acc = n) %>%
group_by(AccessCode) %>%
slice(1) %>%
ungroup() %>%
mutate(DateOfUse = as.Date(DateOfUse)) %>%
mutate(FutureUse = Sys.Date() <= DateOfUse) %>%
mutate(keep = ifelse(n_acc >= 2 | FutureUse, "Keep", "Discard"))
acc_break <- dat_acc %>%
count(keep)
# Chunk 15
renderHighchart({plot_n_overtime("Access Codes", input$groupvar2,
input$steps_switch,
input$acc_switch,
dat.acc, dat.par)})
# Chunk 16
hc_dat <- dat_acc %>%
filter(keep == "Keep") %>%
mutate(Admin = paste0(AdminFirstName, " ", AdminLastName, " (", AdminEmail, ")")) %>%
mutate(Admin = str_remove_all(Admin, "NA NA ")) %>%
count(AdminEmail, sort = T) %>%
count(n) %>%
mutate(n = as.character(n)) %>%
mutate(`Number of Access Codes` = paste0(nn, " Access Codes"))  %>%
mutate(`Number of Instructors` = "Number of Instructors")
hchart(hc_dat, "column", hcaes(x = n, y = nn, name = `Number of Instructors`)) %>%
hc_colors(pal_om(3)[1]) %>%
hc_tooltip(crosshairs = F, backgroundColor = "white",
shared = F, borderWidth = 0.5) %>%
hc_title(
text = "Number of Instructors & Created Access Codes"
) %>%
hc_yAxis(
align = "left",
title = list(text = "Number of Instructors")
) %>%
hc_xAxis(title = list(text = "Number of Access Codes")) %>%
hc_exporting(
enabled = TRUE
) %>%
hc_plotOptions(
column = list(
dataLabels = list(enabled = TRUE, format = '{point.y:,.0f}')
)
)
# Chunk 17
top_list <- dat_acc %>%
filter(keep == "Keep") %>%
add_count(AdminEmail, sort = T) %>%
group_by(AdminEmail) %>%
slice(1) %>%
ungroup() %>%
arrange(desc(n)) %>%
rename(`Number of Access Codes` = n) %>%
select(`Number of Access Codes`, AdminFirstName, AdminLastName, AdminEmail, everything(), -AccessCode, -id, -createdTime, -n_acc, -keep, -TechnicalInquiries, -DateCreated, -NumberMembers, -LockoutTime, -DateOfUse, -Research, -CourseTitle, -CourseDiscipline, -FutureUse)
DT::datatable(top_list)
# Chunk 18
## TODO: Deal with Q16WithModerates/WithoutModerates
## TODO: Deal with selection input
c_s <- str_c("C", 3)
q_s <- str_c("Q", c(4, 11, 14, 16, 17, 18))
q_c_s <- c(q_s, c_s)
basicsummarystats <- basicsummarystats %>%
filter(!(variable_code %in% c("C1", "C2", "C3") & moderates != "CultureVars")) %>%
mutate(Outcome = paste0(Outcome, " (", variable_code, ")"))
sum_stats <- basicsummarystats %>%# View()
filter(variable_code  %in% q_c_s) %>%
mutate(variable_mix = str_c(variable_code, moderates, "")) %>%
filter(variable_mix %nin% c("Q16WithModerates", "Q17WithModerates")) %>%
select(Outcome, variable_code, Variant)  %>%
filter(variable_code %nin% c("C3", "Q4"))
sum_stats %>%
pull(Outcome) %>% unique -> pol_polar_choices
selectInput("ass_chooser",
label = "Select Assessment Version",
choices = c("All", "V4", "V5/V5.1"),
selected = "All")
selectInput("pol_polar",
label = "Variables of Interest",
choices = c(pol_polar_choices),
selected = pol_polar_choices[1])
prettyRadioButtons(inputId = "barvsline",
label = "Barplot vs. Lineplot",
choices = c("column", "line"),
selected = "column")
# prettyprettyRadioButtons(inputId = "int_active",
#              label = "Interactive vs. Static",
#              choices = c("Static", "Interactive"),
#              selected = "Static")
# prettySwitch(inputId = "int_active",
#             label_on = "Interactive",
#             value = F,
#             label_off = "Static")
# Chunk 19
##TODO: Need to add some alternative text if not significant?
# renderUI({
#   if (input$int_active == "Static") {
# renderPlot({
#   plot_gg_comparison(input$ass_chooser,
#                  input$pol_polar,
#                  type = input$barvsline,
#                  sum_stats,
#                  basicsummarystats,
#                  plot_dat)
#   })
#   } else if (input$int_active == "Interactive") {
# renderHighchart({
#   plot_hc_comparison(input$ass_chooser,
#                  input$pol_polar,
#                  type = input$barvsline,
#                  sum_stats,
#                  basicsummarystats,
#                  plot_dat)
#   })
#   }
# })
# plot_hc_comparison(pol_polar_choices[1], "bar", sum_stats)
# pol_polar_choices
#
#   plot_hc_comparison(pol_polar_choices[1],
#                      type = "bar")
# options(scipen = 999)
#
# plot_dat %>%
#   filter(variable_code == "Q17") %>%
#   filter(Variant == "V5/V5.1") %>%
#   t %>% as.data.frame() %>%
#   rownames_to_column("What") %>%
#   set_names(c("What", "FollowUp", "Post", "Pre")) %>%
#   .[-1,] %>%
#   filter(What %nin% c("variable_code", "Variant")) %>%
#   mutate_at(vars(FollowUp, Post, Pre), ~as.character(.x) %>% as.numeric) %>%
#   mutate(sd_pooled_prepost = sqrt(((Pre^2) + (Post^2)) / 2 )) %>%
#   mutate(sd_pooled_followup = sqrt(((Pre^2) + (FollowUp^2)) / 2 )) %>%
#   mutate(cohensd_prepost = (0.426015900 - 0.317246900)/0.137007811)%>%
#   mutate(cohensd_followup = (0.426015900 - 0.33100780)/0.148474290)
#
#
# cohen.d()
plot_it <- basicsummarystats %>%
mutate(Type = case_when(
is.na(Post) ~ "PreFollow",
is.na(FollowUp) ~ "PrePost"
)) %>%
drop_na(N) %>%
filter(variable_code == "Q17")  %>%
select(Type, N, Pre, Post, FollowUp, sd, se, ci, variable_code, Variant) %>%
filter(Variant == "V5/V5.1") %>%
gather(Time, Response, -Type, -N, -sd, -se, -ci, -variable_code, -Variant) %>%
drop_na(Response)
# plot_it %>% View
hc_dat1 <- plot_it %>%
mutate(Type = factor(Type, levels= c("PrePost", "PreFollow"))) %>%
arrange(Type)  %>%
filter(Type == "PrePost") %>%
mutate(color = pal_om(6)[3:4])
hc_dat1  %>%
hchart(type = "column",
hcaes(x = Time, y = Response, color = color, name = Type)) %>%
hc_add_series(data = hc_dat1, type = "errorbar",
hcaes(x = Time, y = Response, low = Response - 1.96*se, high = Response + 1.96*se)) %>%
hc_yAxis(
max = 1,
min = 0,
align = "left",
title = list(text = "Score"),
showLastLabel = T
)
# ggplot(aes(key, value, fill = key)) +
# geom_col() +
# facet_wrap(~Type, scales = "free_x")+
# geom_errorbar(aes(ymin = value - 1.96*se, ymax = value + 1.96*se), width = 0.25, size = 0.01) +
# scale_fill_manual(values = pal_om(5)[3:5]) +
# theme_om(legend_position = "none") +
# ylim(0, 1) +
# labs(x = "")
# Chunk 20
hc_dat2 <- plot_it %>%
mutate(Type = factor(Type, levels= c("PrePost", "PreFollow"))) %>%
arrange(Type)  %>%
filter(Type == "PreFollow") %>%
mutate(color = pal_om(6)[3:4])
hc_dat2  %>%
hchart(type = "column",
hcaes(x = Time, y = Response, color = color, name = Type)) %>%
hc_add_series(data = hc_dat2, type = "errorbar",
hcaes(x = Time, y = Response, low = Response - 1.96*se, high = Response + 1.96*se)) %>%
hc_yAxis(
max = 1,
min = 0,
align = "left",
title = list(text = "Score"),
showLastLabel = T
)
# Chunk 21
renderUI({
print_description(
input$ass_chooser,
input$pol_polar,
basicsummarystats
)
})
devtools::check()
devtools::load_all()
