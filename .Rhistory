mutate(from = "Pre",
to = "Post",
weight = cum_n) %>%
select(from, to, weight),
## Follow Up
sankey_raw %>%
filter(PrePostFollow == "111") %>%
mutate(from = "Post",
to = "Follow Up",
weight = cum_n) %>%
select(from, to, weight) %>%
mutate(weight = sum(weight)) %>%
slice(1)
)
return(sankey_dat)
}
# final_dat <- app.dat %>% om_clean_ppol
#
# om_construct_measures(final_dat)
## Useful Strings ------------------------------------------------------------------------
## Will be needed later for selecting useful variables in dat.acc
acc_filters <- c("AccessCode", "UserType", "NumberMembers",
"Country", "LockoutTime", "DateOfUse", "GroupName",
"Research", "CourseTitle", "CourseDiscipline")
## Cleaning Data------------------------------------------------------------------------
# version <- c("4", "5", "5.1")
## TODO: I discovered there are FeedbackAnswers in Assessment data (before I thought it's only in GT)
## Filter down dat.ass to the specific subset you want
app.dat <- dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = c(1, 2, 3),
# assessment version?
version = NULL,
# select organization/group to produce report for
accesscode = NULL
# "Wilkes" #try this out :)
) %>%
## Make Variables that should be numeric, numeric
mutate_at(vars(matches(var_strings)), parse_number)
## Clean datasets and join them
## TODO: Build in checker that all data is correct
## Problem: Steps complete ranges back further (dat.par) than assessment v4 and v5.1.
cleaned_dat <-
## Participant Progress Data
dat.par %>%
## calculating step scores and more
om_clean_par(parse_feedback = T) %>%
## Assessment Data
left_join(app.dat) %>%
## adding actual time
mutate(createdTime = ifelse(is.na(createdTime), at_date, createdTime)) %>%
## Make variables Q1 and Q2 as well as Q3 to C3 range 0 to 1
om_rescale() %>%
## construct ppol measures
om_clean_ppol()  %>%
## construct measures such as intellectual humility
om_construct_measures() %>%
## AccessCode Data  (only keep variables specified in acc_filters)
left_join(dat.acc %>% select(acc_filters)) %>%
## remove duplicates
remove_dups() %>%
## make vars numeric
# mutate_at(vars(matches(var_strings)), as.numeric) %>%
mutate_at(vars(Step1:Step5_Q5), as.character) %>%
mutate(AssessmentsDone = as.character(AssessmentsDone)) %>%
##  GuidedTrack Data
mutate(Source = "AirTable") %>%
## TODO: Should happen automatically in om_clean_par but not, whats going on
mutate(AppRating = as.character(AppRating)) %>%
coalesce_join(gt_parsed_feedback %>%
mutate(Source = "GT") %>%
mutate(AppRating = as.character(AppRating)) %>%
mutate_at(vars(Step1:Step5_Q5), as.character) %>%
mutate(AssessmentsDone = as.character(AssessmentsDone)) %>%
mutate(createdTime = date), by = "OMID") %>%
## weird case where UserType is empty string
mutate(UserType = ifelse(nchar(UserType) == 0, NA, UserType)) %>%
drop_na(UserType) %>%
mutate(createdTime = as_datetime(createdTime)) %>%
## Count how many steps complete
mutate(steps_complete = str_count(StepsComplete, "1") %>% as.character) %>%
## we only want AssessmentsDone 1 thru 3
## Problem: There are AssessmentsDone 0 in the data.. they have completed steps but no Assessment.. how is that possible?
filter(AssessmentsDone %in% 1:3) %>%
## TODO: maybe this is not needed
mutate(AppRating = as.numeric(AppRating))
## Dataviz
# cleaned_dat %>%
# filter(steps_complete != "0") %>%
# mutate(date = floor_date(createdTime, "month")) %>%
# count(date, Source) %>%
# ggplot(aes(date, n, color = Source)) +
# geom_line()
##TODO: There are 34 StepTimes NA
# cleaned_dat %>% filter(steps_complete != "0") %>% count(StepTimes, sort =T)
# cleaned_dat %>% filter(is.na(StepTimes)) %>% View
## Gather dataset
## Take cleaned data and make it into long format
gathered_dat <- om_gather(cleaned_dat, q_c_strings)
# db_append("sql_data/omdata.db", "gathered_dat",
# data = gathered_dat)
# app.dat %>% dplyr::count(D4)
## ----Analysis--------------------------------
# loading and basic cleaning of dataframe
# app.dat <- load_it("data/cleaned_dat.Rdata")
# gathered_dat <- load_it("data/gathered_dat.Rdata") %>%
# mutate(variable_code = str_remove(Question, Type))
# app.dat <- Wilkes.pp
# assess missingness by wave and create variables to plot missingness
cum_missing <- prop_miss(app.dat)
min_miss_var <- cum_missing %>% slice(1) %>% pull(variable_code)
## Summarize Comparisons functions------------------------------------------------------------------------
## Basic Summary Stats------------------------------------------------------------------------
# create tables showing cohen's d, CIs, t stat, p-value, and % improvement
# note the logical comparison for percent improvement. for polarization questions pre scores should be LESS than post scores,
# all others should be greater at post than pre, due to reverse scoring
# mutate(Question_txt = case_when(
#   variable_code == "Q1" ~  "How do you feel about individuals who identify as progressive?",
#   variable_code == "Q2" ~  "How do you feel about individuals who identify as conservative?",
#   variable_code == "Q3" ~  "When someone disagrees with ideas that are important to me, it feels as though I am being attacked.",
#   variable_code == "Q4" ~  "If I am sure I am right about something, I do not waste much time listening to other people's arguments.",
#   variable_code == "Q5" ~  "It is possible for people to hold important beliefs that are different from my own and still be good, intelligent people.",
#   variable_code == "Q6" ~  "When I am really confident in a belief, there is very little chance that belief is wrong.",
#   variable_code == "Q7" ~  "I am willing to change my position on important moral issues if someone gives me good reasons.",
#   variable_code == "Q8" ~  "I question my own opinions, positions, and viewpoints because they could be wrong.",
#   variable_code == "Q9" ~  "Before criticizing somebody, I try to imagine how I would feel if I were in their place.",
#   variable_code == "Q10" ~ "If I found out someone disagreed with my important beliefs, I would be less interested in being friends with them.",
#   variable_code == "Q11" ~ "Your intelligence is something about you that you cannot change very much.",
#   variable_code == "Q12" ~ "I can usually appreciate another persons viewpoint, even if I do not agree with it.",
#   variable_code == "Q14" ~ "Affective Polarization",
#   variable_code == "C1" ~  "I can usually appreciate another person's viewpoint, even if I dont agree with it.",
#   variable_code == "C2" ~  "In my classroom people respect one another even if they disagree.",
#   variable_code == "C3" ~  "I feel free to express my beliefs in my classroom.",
#   variable_code == "Q15" ~ "Liking for Ingroup",
#   variable_code == "Q16" ~ "Liking for Outgroup",
#   variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
#   variable_code == "Q18" ~ "Intellectual Humility"
# )) %>%
# mutate(Outcome = case_when(
#   variable_code == "Q1" ~  'Liking of Progressives',
#   variable_code == "Q2" ~  'Liking of Conservatives',
#   variable_code == "Q3" ~  'IH1',
#   variable_code == "Q4" ~  'Perspective-Taking',
#   variable_code == "Q5" ~  'AP7',
#   variable_code == "Q6" ~  'IH2',
#   variable_code == "Q7" ~  'IH3',
#   variable_code == "Q8" ~  'IH4',
#   variable_code == "Q9" ~  'PT2',
#   variable_code == "Q10" ~ 'Social Closeness',
#   variable_code == "Q11" ~ 'Growth Mindset',
#   variable_code == "Q12" ~  'Cognitive Empathy',
#   variable_code == "Q14" ~ 'Affective Polarization',
#   variable_code == "C1" ~  'Comfort Discussing Controversy in Class',
#   variable_code == "C2" ~  'Freedom to Express Beliefs in Class',
#   variable_code == "C3" ~   'Respectful Disagreement in Class',
#   variable_code == "Q15" ~  'Liking of Ingroup',
#   variable_code == "Q16" ~  'Liking of Outgroup',
#   variable_code == "Q17" ~  'Ingroup-Outgroup Polarization',
#   variable_code == "Q18" ~  'Intellectual Humility',
# )) %>%
## Assessmenver Version 5.1
# C1. In my {classroom} people respect one another even if they disagree.
# C2. My {classroom} is a space where people feel comfortable having open and honest conversations, even when discussing controversial topics.
# C3. I feel free to express my beliefs in my {classroom/organization}, even when my beliefs go against the beliefs of my {peers / colleagues}.
#Changed from V4 to V5.1
#Q3, Q4. Q5, Q6, Q7, Q8, Q9, Q10,
# S1 comes into existence, Q12 goes away
# devtools::install_github("hrbrmstr/docxtractr")
# library(docxtractr)
# assessmentv5_codebook <- read_docx("../../Assessment/Assessments/v5/Assessment V5.1 181228.docx") %>%
# docx_extract_tbl()
# assessmentv4_codebook <- read_docx("../../../../Assessment/Assessments/V4/OpenMind Assessment v4.docx") %>%
# docx_extract_tbl()
# save(assessmentv5_codebook, file = "sql_data/assessmentv5_codebook.Rdata")
# save(assessmentv4_codebook, file = "sql_data/assessmentv4_codebook.Rdata")
# assessmentv5_codebook <- get(load("../om_metrics_report/sql_data/assessmentv5_codebook.Rdata"))
# assessmentv4_codebook <- get(load("../om_metrics_report/sql_data/assessmentv4_codebook.Rdata"))
# usethis::use_data(assessmentv4_codebook)
# om_summarize_comparisons <- function(gathered_dat, aversion, compare = c("PrePost", "PreFollow")) {
#
#   # Variant <- "V5"
#
#   gathered_dat <- gathered_dat %>%
#     do_if(.data = .,
#           condition = aversion == "V4",
#           call = ~{
#             .x %>%
#               filter(AssessmentVersion == 4)
#           }
#     ) %>%
#     do_if(.data = .,
#           condition = aversion == "V5",
#           call = ~{
#             .x %>%
#               filter(AssessmentVersion >= 5)
#           }
#     )
#
#
#   basicsummarystats <- gathered_dat %>%
#     om_summarize_comparisons(compare) %>%
#     do_if(.data = .,
#       condition = aversion == "V5",
#       call = ~{
#         .x %>%
#           left_join(assessmentv5_codebook %>% dplyr::rename(variable_code = Mapping)) %>%
#           mutate(Variant = "V5/V5.1")
#         }
#     ) %>%
#     do_if(.data = .,
#           condition = aversion == "V4",
#           call = ~{
#             .x %>%
#               left_join(assessmentv4_codebook %>% dplyr::rename(variable_code = Mapping)) %>%
#               mutate(Variant = "V4")
#           }
#     ) %>%
#     do_if(.data = .,
#           condition = aversion == "All",
#           call = ~{
#             .x %>%
#               left_join(assessmentv5_codebook %>% dplyr::rename(variable_code = Mapping)) %>%
#               mutate(Variant = "All")
#           }
#     ) %>%
#     dplyr::rename(Question_txt = Content) %>%
#     mutate(Question_txt = case_when(
#       variable_code == "Q14" ~ "Affective Polarization",
#       variable_code == "Q15" ~ "Liking for Ingroup",
#       variable_code == "Q16" ~ "Liking for Outgroup",
#       variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
#       variable_code == "Q18" ~ "Intellectual Humility",
#       T ~ Question_txt
#     )) %>%
#     mutate(Outcome = case_when(
#       variable_code == "Q14" ~ 'Affective Polarization Measure',
#       variable_code == "Q15" ~  'Liking of Ingroup',
#       variable_code == "Q16" ~  'Liking of Outgroup',
#       variable_code == "Q17" ~  'Ingroup-Outgroup Polarization Measure',
#       variable_code == "Q18" ~  'Intellectual Humility Measure',
#       T ~ Construct
#     )) %>%
#     select(Outcome, Question_txt, cohend:percentimproved, variable_code, Comparison, moderates, Variant) %>%
#     drop_na(Outcome)
#
#   return(basicsummarystats)
#
# }
basicsummarystats <- c("V4", "V5/V5.1", "All") %>%
map_dfr(~om_summarize_comparisons(gathered_dat, .x))
basicsummarystats <- c("V4", "V5/V5.1", "All") %>%
map_dfr(~om_summarize_comparisons(gathered_dat, .x))
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
## PrePost Data
compare_dat_prepost <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
## count OMIDs and PrePost Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate scores where Moderates need to be excluded
no_moderate_dat_prepost <- compare_dat_prepost %>%
dplyr::filter(variable_code %in% c("Q15", "Q16", "Q17")) %>%
tidyr::drop_na(ppol_cat) %>%
## PrePost
openmindR::bind_questions(waves = "PrePost") %>%
dplyr::mutate(Comparison = "PrePost") %>%
## add indicator
dplyr::mutate(moderates = "WithoutModerates")
final_compared_prepost <- moderate_dat_prepost %>% dplyr::bind_rows(no_moderate_dat_prepost)
## PreFollow Data
compare_dat_prefollow <- gathered_dat %>%
dplyr::filter(Type %in% c("Pre", "FollowUp")) %>%
tidyr::drop_na(Response) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "FollowUp"))) %>%
## count OMIDs and PreFollow Type
dplyr::add_count(OMID, variable_code) %>%
## only keep cases where Pre and Post exist
dplyr::filter(n == 2)
## Calculate Scores for all data
moderate_dat_prefollow <- compare_dat_prefollow %>%
dplyr::filter(variable_code %nin% c("Q15", "Q16", "Q17")) %>%
## PreFollow
openmindR::bind_questions(waves = "PreFollow") %>%
dplyr::mutate(Comparison = "PreFollow") %>%
## add indicator
dplyr::mutate(moderates = "WithModerates") %>%
## Deal with Culture Vars
dplyr::filter(!is.nan(cohend)) %>%
dplyr::mutate(moderates = ifelse(variable_code %in% c("C1", "C2", "C3"), "CultureVars", moderates))
## Calculate scores where Moderates need to be excluded
no_moderate_dat_prefollow <- compare_dat_prefollow  %>%
dplyr::filter(variable_code %in% c("Q15", "Q16", "Q17")) %>%
tidyr::drop_na(ppol_cat) %>%
## PreFollow
openmindR::bind_questions(waves = "PreFollow") %>%
dplyr::mutate(Comparison = "PreFollow") %>%
## add indicator
dplyr::mutate(moderates = "WithoutModerates")
final_compared_prefollow <- moderate_dat_prefollow %>% dplyr::bind_rows(no_moderate_dat_prefollow)
final_compared <- final_compared_prepost %>% dplyr::bind_rows(final_compared_prefollow)
final_compared
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par(parse_feedback = T)
dat.ass %>%
om_rescale()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons(aversion = "V4",
compare = c("PrePost", "PreFollow")) %>%
arrange(desc(percentimproved))
om_label_stats(gathered_dat, aversion = "V4")
load("../om_parser/data/ann_miller_merged.Rdata")
cleaned_data <- ann_miller_merged %>%
## make unique OMID
mutate(OMID = ifelse(is.na(OMID), ResearchID, OMID)) %>%
## rescale vars
om_rescale() %>%
## make D4 to standard PoliticalAffil
mutate(D4 = ifelse(is.na(D4), PoliticalAffil, D4)) %>%
## create ppols
om_clean_ppol() %>%
## om_construct measures needs a complete AV4
mutate(AssessmentVersion = 4) %>%
## construct measures
om_construct_measures() %>%
## remove duplicates
remove_dups()
gathered_dat <- cleaned_data %>%
om_gather(q_c_strings)
Q11_dat <- om_mix_models(gathered_dat,
question = "Q11",
plot_model = T,
get_effects = T,
get_tidy = T)
Q11_dat$ggmod
Q11_dat$effects_dat %>%
knitr::kable()
Q11_dat$tidy_dat %>%
knitr::kable()
Q11_dat$lme_dat
om_mix_plot(effects_dat = Q11_dat$effects_dat,
tidy_dat = Q11_dat$tidy_dat,
var_label = "Growth Mindset",
show_stats = T)
om_mix_complete(gathered_dat, "Growth Mindset")
Q11_dat$ggmod
Q11_dat$ggmod
Q11_dat$ggmod
Q11_dat$ggmod
install.packages("rmarkdown")
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
