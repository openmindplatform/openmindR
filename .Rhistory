DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# usethis::use_data(range01_strings)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons() %>%
arrange(desc(percentimproved))
sjmisc::%nin%
sjmisc:::%nin%
devtools::document()
devtools::install_github("openmindplatform/openmindR")
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
# library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# usethis::use_data(range01_strings)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
# library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# usethis::use_data(range01_strings)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
dplyr::select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons() %>%
arrange(desc(percentimproved))
devtools::install_github("openmindplatform/openmindR")
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
# library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# usethis::use_data(range01_strings)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
dplyr::select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons() %>%
arrange(desc(percentimproved))
devtools::document()
devtools::install_github("openmindplatform/openmindR")
knitr::opts_chunk$set(message = F,
warning = F)
library(openmindR)
# library(dplyr)
db_get_data <- function(tbl_dat) {
con <- DBI::dbConnect(RSQLite::SQLite(), "../om_metrics_report/sql_data/omdata.db")
out <- con %>%
dplyr::tbl(tbl_dat) %>%
dplyr::collect()
DBI::dbDisconnect(con)
return(out)
}
# Matching string for all Q variables
# q_strings <- paste0(
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
# range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
#                          stringr::str_c("Q", 3:12, "F", collapse = "|"),
#                          stringr::str_c("|", c_strings, collapse = "|")
# )
# usethis::use_data(range01_strings)
# Read in data
dat.acc <- db_get_data("dat.acc")
dat.par <- db_get_data("dat.par")
dat.ass4 <- db_get_data("dat.ass4")
dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- dat.ass4 %>%
dplyr::rename_at(dplyr::vars(dplyr::matches("Followup")), ~stringr::str_replace(., "Followup", "FollowUp")) %>%
dplyr::bind_rows(dat.ass5)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = "Wilkes"
# "Wilkes" #try this out :)
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("SuszkoWilkesUF18", "KarimiWilkesUF18")
)
dat.ass %>%
# specify which number of assessment you want to have
om_filter_data(n_assessments = 1:3,
# assessment version?
version = 4,
# select Accesscode(s) to produce report for
accesscode = c("suszko|karimi")
)
dat.par %>%
om_clean_par()
dat.ass <- dat.ass %>%
om_clean_ppol()
dat.ass
dat.ass %>%
om_construct_measures()
dat.ass %>%
remove_dups()
dat.ass %>%
om_gather(q_c_strings) %>%
## select just the relevant vars as showcase
dplyr::select(Question, Response, Type, variable_code)
## Prepare gathered_dat
gathered_dat <- dat.ass %>%
om_construct_measures() %>%
remove_dups() %>%
om_gather(q_c_strings)
gathered_dat %>%
om_summarize_comparisons() %>%
arrange(desc(percentimproved))
gathered_dat %>%
om_summarize_comparisons() %>%
dplyr::arrange(desc(percentimproved))
devtools::document()
devtools::install_github("openmindplatform/openmindR")
library(dplyr)
library(openmindR)
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
# q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
# ## Matching string for ranging vars from 0 to 1
range01_strings <- stringr::str_c(stringr::str_c("Q", 3:12, "P", collapse = "|"), "|",
stringr::str_c("Q", 3:12, "F", collapse = "|"),
stringr::str_c("|", c_strings, collapse = "|")
)
range01_strings
stringr::str_c("Q", 3:12, "P", collapse = "|")
#   paste0("Q", 1:18, "P", collapse = "|"), "|", paste0("Q", 1:18, "F", collapse = "|")
#   )
# ## Matching string for all (relevant) D variables
# d_strings <- paste0("D", 1, collapse = "|")
# ## Matching string for all C variables
# c_strings <- paste0("C", 1:3, collapse = "|")
#
# ## Matching string for all (relevant) D, Q and C variables
# var_strings <- paste0(q_strings, "|", d_strings, "|", c_strings, collapse = "|")
# ## Matching string for all Q and C variables
q_c_strings <- paste0(q_strings, "|", c_strings, collapse = "|")
q_c_strings
q_strings
c_strings
q_c_strings
q_c_strings %>% paste0("\\|S1\\|S2")
q_c_strings %>% paste0("|S1|S2")
openmindR::c_strings
openmindR::q_c
openmindR::q_c_strings
q_c_strings
devtools::document()
devtools::install_github("openmindplatform/openmindR")
devtools::document()
devtools::install_github("openmindplatform/openmindR")
remote::install_github("openmindplatform/openmindR")
remotes::install_github("openmindplatform/openmindR")
remotes::install_github("openmindplatform/openmindR")
remotes::install_github("openmindplatform/openmindR")
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
load("data/acc.RData")
load("data/par.RData")
load("data/ins.RData")
#Read in data
load("data/ass4.RData")
setwd("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR")
setwd("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing")
#Read in data
load("data/ass4.RData")
load("data/ass5.RData")
load("data/acc.RData")
load("data/par.RData")
om_filter_data(dat.ass4,n_assessments=3,version=4)
load("data/ins.RData")
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
#can it accept ranges?
n1plusv4<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept multiple values?
n1rangev4<-om_filter_data(dat.ass4,n_assessments=c(1,2),version=4)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18t","EddySalemStateUniversityF18s"),
exact_search=T)
# can it filter down to all access codes by pattern matching?
n1v4<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode="CLP",exact_search = F)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
n3v5<-om_filter_data(dat.ass5,n_assessments=3,version=5)
nNULLv5<-om_filter_data(dat.ass5,version=5)
#can it accept multiple values?
n1rangev5<-om_filter_data(dat.ass5,n_assessments=c(1,2),version=5)
# 5.1
#v5
n1v5.1<-om_filter_data(dat.ass5,n_assessments=1,version=5.1)
n2v5.1<-om_filter_data(dat.ass5,n_assessments=2,version=5.1)
n3v5.1<-om_filter_data(dat.ass5,n_assessments=3,version=5.1)
# calc_correct
calc_correct(dat.par$StepsComplete,dat.par$StepScores,dat.par$StepQuestionTotals)
# spits out a bunch of NAs
# this function should have an argument specifying data frame where those 3 variables are, and convert them to numeric
calc_correct(as.numeric(dat.par$StepsComplete),as.numeric(dat.par$StepScores),as.numeric(par$StepQuestionTotals))
clean_par<-om_clean_par(dat.par)
#clean ppol
?om_clean_ppol()
n3v4cleanppol<-om_clean_ppol(n3v4)
table(n2v4cleanppol$ppol_num)
table(n2v4cleanppol$ppol_raw)
table(n2v4cleanppol$ppol)
table(n2v4cleanppol$ppol_cat)
n3v4cleanppol<-om_clean_ppol(n3v4)
om_construct_measures(n3v4cleanppol)
n3v4constructed<-om_construct_measures(n3v4cleanppol)
summary(n2v4constructed)
summary(n3v4constructed)
om_summarize_comparisons(n3v4long)
n3v4long<-om_gather(n3v4constructedremdups,which_strings=q_c_strings)
n3v4constructedremdups<-remove_dups(n3v4constructed)
n3v4long<-om_gather(n3v4constructedremdups,which_strings=q_c_strings)
om_summarize_comparisons(n3v4long)
View(n3v4long)
table(n3v4long)
a<-om_summarize_comparisons(n3v4long)
View(a)
?om_summarize_comparisons()
source('C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/R/cleaning.R', echo=TRUE)
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
?om_summarize_comparisons()
devtools::install_github("openmindplatform/openmindR")
library(openmindR)
?om_summarize_comparisons
om_filter_data(dat.ass4,n_assessments=3,version=4)
n1v4<-om_filter_data(dat.ass4,n_assessments=1,version=4)
n2v4<-om_filter_data(dat.ass4,n_assessments=2,version=4)
n3v4<-om_filter_data(dat.ass4,n_assessments=3,version=4)
nNULLv4<-om_filter_data(dat.ass4,version=4)
#can it accept ranges?
n1plusv4<-om_filter_data(dat.ass4,n_assessments>1,version=4)
#can it accept multiple values?
n1rangev4<-om_filter_data(dat.ass4,n_assessments=c(1,2),version=4)
# access codes
n1v4a<-om_filter_data(dat.ass4,n_assessments=3
,version=4,accesscode="EddySalemStateUniversityF18",exact_search=F)
#multiple access codes?
n1v4aplus<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode=c("EddySalemStateUniversityF18","EddySalemStateUniversityF18t","EddySalemStateUniversityF18s"),
exact_search=T)
# can it filter down to all access codes by pattern matching?
n1v4<-om_filter_data(dat.ass4,n_assessments=3,version=4,accesscode="CLP",exact_search = F)
#v5
n1v5<-om_filter_data(dat.ass5,n_assessments=1,version=5)
n2v5<-om_filter_data(dat.ass5,n_assessments=2,version=5)
#Read in data
load("data/ass4.RData")
getwd()
setwd("C:/Users/Matt/Dropbox/OM Team/Research/Projects/Current Projects/openmindR/Matt Testing/")
