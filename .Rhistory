mutate(Answers = IssueAnswers) %>%
mutate(Source = "Porter, T., & Schumann, K. (2018) - Responses to Disagreement Scale")
Preparedness <- c("When talking to a person I strongly disagree with politically, I feel very overwhelmed", "I am afraid to have conversations about controversial topics", "I would feel comfortable having difficult conversations with those who hold different views from me", "I feel prepared to have a difficult conversation with someone who holds different views")
preparedness <- tibble(paste0("Preparedness", 1:length(Preparedness)), Preparedness) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Preparedness for Difficult Conversations") %>%
mutate(Answers = "7-Point Agreement Scale") %>%
mutate(Source = "OM 2019")
ROV_NE <- c("Listening to people with views that strongly oppose mine tends to make me angry", "I feel disgusted by some of the things that people with views that oppose mine say", "I often feel frustrated when I listen to people with social and political views that oppose mine", "I often get annoyed during discussions with people with views that are very different from mine")
rov_ne <- tibble(paste0("ROV_NE", 1:length(ROV_NE)), ROV_NE) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Receptivity to Opposing Views-Negative Emotion") %>%
mutate(Answers = "7-Point Agreement Scale") %>%
mutate(Source = "Minson, J., Chen, F., & Tinsley, C. H. (under review)")
ExposureB <- c("In the past week, approximately how many people have you talked to (either in person or online) with a different political persuasion?", "In the past week, approximately how many times have you deliberately sought out a perspective that was different from your own?")
exposureb <- tibble(c("TalkToDifferent", "SoughtOutDifferent"), ExposureB) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Selective Exposure") %>%
mutate(Answers = c("1", "2", "3", "4+") %>% glue::glue_collapse(sep = "<br>")) %>%
mutate(Source = "OM 2019")
MotivationQ <- c("To what extent do you think that *progressives* are motivated by wanting to improve society?", "To what extent do you think that *progressives* are motivated by wanting to harm others?", "To what extent do you think that *conservatives* are motivated by wanting to improve society?", "To what extent do you think that *conservatives* are motivated by wanting to harm others?")
motq <- tibble(c("MotivationProg1",
"MotivationProg2",
"MotivationCon1",
"MotivationCon2"), MotivationQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Motivation Attribution Asymmetry") %>%
mutate(Answers = "7-Point Scale: 1 = Not at all - 7 = Extremely") %>%
mutate(Source = "Waytz, A., Young, L. L., & Ginges, J. (2014)")
ConTraitQ <- paste0("On a scale of 1-7, please rate *conservatives* according to the following characteristics:<br><b>", c("hypocritical", "selfish", "honest", "brainwashed", "reasonable"),"</b>")
contraitq <- tibble(paste0("TraitCon", 1:length(ConTraitQ)), ConTraitQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Trait Ratings") %>%
mutate(Answers = "7-Point Scale: 1 = Not at all - 7 = Extremely") %>%
mutate(Source = "Modified from More in Common (2019)")
ProgTraitQ <- paste0("On a scale of 1-7, please rate *progressives* according to the following characteristics:<br><b>", c("hypocritical", "selfish", "honest", "brainwashed", "reasonable"),"</b>")
progtraitq <- tibble(paste0("TraitProg", 1:length(ProgTraitQ)), ProgTraitQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Trait Ratings") %>%
mutate(Answers = "7-Point Scale: 1 = Not at all - 7 = Extremely") %>%
mutate(Source = "Modified from More in Common (2019)")
TempText <- c("How do you feel about individuals who identify as progressive (people on the left)?", "How do you feel about individuals who identify as conservative (people on the right)?")
tempq <- tibble(c("ProgTemp", "ConTemp"), TempText) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Affective Polarization I") %>%
mutate(Answers = "0 = Extremely cold - 100 = Extremely warm") %>%
mutate(Source = "American National Election Studies (ANES) Feeling Thermometer")
RoomieQ <- c("How would you feel if this person were your roommate/a colleague you worked with every day? [show picture of a Bernie supporter]", "How would you feel if this person were your roommate/a colleague you worked with every day? [show picture of a Trump supporter]")
roomieq <- tibble(c("UpsetProg", "UpsetCon"), RoomieQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Affective Polarization II") %>%
mutate(Answers = "1 = Not upset - 7 = Extremely upset") %>%
mutate(Source = "OM 2019")
LLGQ <- "Please review the list below and select the group that you like the <b>least</b>."
LeastLikedGroups <- c("Socialists", "Tea Party members", "Trump supporters", "Elizabeth Warren supporters", "Black Lives Matter protestors", "All Lives Matter protestors", "Pro-life supporters", "Pro-choice supporters", "Atheists", "Christians", "Muslims", "Other (you will be asked to enter a group)") %>% glue::glue_collapse(sep = "<br>")
llgq <- tibble("LeastLikedGroup", LLGQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Political Tolerance") %>%
mutate(Answers = LeastLikedGroups) %>%
mutate(Source = "Modified from Price, E., Ottati, V., Wilson, C., & Kim, S. (2015)")
LLQQRate <- "Please rate how you feel about {LeastLikedGroup}"
llgqrate <- tibble("HowLeastLikedGroup", LLQQRate) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Political Tolerance") %>%
mutate(Answers = "0 = Extremely cold - 100 = Extremely warm") %>%
mutate(Source = "OM 2019")
LeastLikedGroupQ <- c("Social media platforms should be doing more to moderate the content produced by {LeastLikedGroup}.",	"{LeastLikedGroup} should be prohibited from holding protests in my city.", "{LeastLikedGroup} should be prevented from teaching in public schools.", "{LeastLikedGroup} should be prevented from posting content in online forums.", "{LeastLikedGroup} should be permitted to use public college campuses to hand out pamphlets expressing their views.",	"It is more important to protect society from the views of {LeastLikedGroup} than it is to protect the free speech of {LeastLikedGroup}.")
politicaltolerance <- tibble(paste0("PoliticalTolerance", 1:length(LeastLikedGroupQ)), LeastLikedGroupQ) %>%
set_names(c("Variable Code", "Question Text")) %>%
mutate(Concept = "Political Tolerance") %>%
mutate(Answers = "7-Point Agreement Scale") %>%
mutate(Source = "Price, E., Ottati, V., Wilson, C., & Kim, S. (2015)")
bind_rows(demographics,
culture,
intellectual_humility,
GM,
gbss,
issue,
issuestance,
howimportantissue,
ihtext,
issueq,
preparedness,
rov_ne,
exposureb,
motq,
contraitq,
progtraitq,
roomieq,
llgq,
llgqrate,
politicaltolerance) %>%
DT::datatable(escape = F)
bind_rows(demographics,
culture,
intellectual_humility,
GM,
gbss,
issue,
issuestance,
howimportantissue,
ihtext,
issueq,
preparedness,
rov_ne,
exposureb,
motq,
contraitq,
progtraitq,
tempq,
roomieq,
llgq,
llgqrate,
politicaltolerance,
fassessment) %>%
DT::datatable(fillContainer = T, escape = F,
extensions = c('Scroller','Buttons'),
class = 'compact cell-border stripe',
options = list(
deferRender = FALSE,
scrollY = 1000,
scroller = TRUE,
dom = 'Bfrtip',
buttons = c('excel', 'pdf', 'csv')
))
bind_rows(demographics,
culture,
intellectual_humility,
GM,
gbss,
issue,
issuestance,
howimportantissue,
ihtext,
issueq,
preparedness,
rov_ne,
exposureb,
motq,
contraitq,
progtraitq,
tempq,
roomieq,
llgq,
llgqrate,
politicaltolerance,
fassessment) %>%
DT::datatable(fillContainer = T, escape = F,
extensions = c('Buttons'),
class = 'compact cell-border stripe',
options = list(
deferRender = FALSE,
dom = 'Bfrtip',
buttons = c('excel', 'pdf', 'csv')
))
bind_rows(demographics,
culture,
intellectual_humility,
GM,
gbss,
issue,
issuestance,
howimportantissue,
ihtext,
issueq,
preparedness,
rov_ne,
exposureb,
motq,
contraitq,
progtraitq,
tempq,
roomieq,
llgq,
llgqrate,
politicaltolerance,
fassessment) %>%
DT::datatable(fillContainer = T, escape = F,
extensions = c('Scroller','Buttons'),
options = list(
deferRender = FALSE,
scrollY = '450px',
scrollX = '100px',
scroller = TRUE,
dom = 'Bfrtip',
buttons = c('excel', 'pdf', 'csv')
))
bind_rows(demographics,
culture,
intellectual_humility,
GM,
gbss,
issue,
issuestance,
howimportantissue,
ihtext,
issueq,
preparedness,
rov_ne,
exposureb,
motq,
contraitq,
progtraitq,
tempq,
roomieq,
llgq,
llgqrate,
politicaltolerance,
fassessment) %>%
DT::datatable(fillContainer = T, escape = F,
extensions = c('Scroller','Buttons'), width = 6,
options = list(
deferRender = FALSE,
scrollY = '450px',
scroller = TRUE,
dom = 'Bfrtip',
buttons = c('excel', 'pdf', 'csv')
))
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
remove.packages("openmindR")
devtools::install()
raw_input <- "[5, (not asked), 9, (not asked), |Practical tools for respectful disagreement.|, |Replace the elephant and rider with another metaphor or clear language. It was hard to keep clear the meaning of elephant and rider. The reference got confused with the pink elephant in the introduction. And I couldnâ€™t figure out why a non-partisan environment was so full of elephants without a single donkey reference. Can you put the rider on a donkey?|]"
if (is.na(raw_input)) {
return(dplyr::tibble(no_data = 1))
}
raw_input %>%
openmindR::om_strsplit("],", type = "after") %>%
purrr::map(~stringr::str_split(.x, ",")) %>%
magrittr::extract2(1) %>%
purrr::map(~{
fixed_answers <- .x[1:4]
open_answers <- .x[5:length(.x)] %>%
glue::glue_collapse(",") %>%
stringr::str_split(", \\|", n = 2)
# stringr::str_split("\\.,|\\b , \\b")
return(list(fixed_answers = fixed_answers,
open_answers = open_answers))
}) -> split_string
clean_fix <- split_string %>%
purrr::map("fixed_answers") %>%
dplyr::bind_cols()
clean_open <- split_string %>%
purrr::map("open_answers") %>%
purrr::flatten() %>%
dplyr::bind_cols()
row_dat <- dplyr::bind_rows(clean_fix, clean_open) %>%
dplyr::mutate_all(function(x) ifelse(nchar(x) == 0, NA, x)) %>%
dplyr::mutate_all(function(x) stringr::str_remove_all(x, "\\[\\[|\\[")) %>%
purrr::set_names(.[1,] %>% .[1:ncol(.)]) %>%
janitor::clean_names() %>%
dplyr::mutate(colnames = c("Step", paste0("X", 1:5))) %>%
dplyr::mutate_all(stringr::str_trim)
## Remove duplicate steps
row_dat <- row_dat[,!(row_dat[1, ] %>% purrr::transpose() %>% duplicated())]
row_dat <- row_dat[,!(row_dat %>% slice(1) %>% unlist() %>% as.vector() %>% duplicated())]
row_dat <- row_dat[,!(row_dat %>% dplyr::slice(1) %>% unlist() %>% as.vector() %>% duplicated())]
final_dat <- row_dat %>%
colnames() %>%
purrr::discard(. == "colnames") %>%
purrr::map_dfc(~spread_it(.x, row_dat)) %>%
dplyr::as_tibble()
devtools::document()
devtools::document()
devtools::install()
shortened_version <- c("D1", "D2", "D3", "D4", "D6", "C1", "C5", "C6", "ProgTemp", "ConTemp", "MotivationProg1", "MotivationProg2", "MotivationCon1", "MotivationCon2", "CIHS_LIO1", "CIHS_LIO2", "CIHS_LIO3", "CIHS_LIO4", "GrowthMindset", "IssueDisplay", "HowImportantIssue", "IHText", "Preparedness3", "SoughtOutDifferent", "FeedbackAssessment", "GBSS1", "GBSS2", "GBSS3")
pacman::p_load(tidyverse, tidytemplate, openmindR)
AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
AssessmentV61Codebook <- AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
usethis::use_data(AssessmentV61Codebook)
usethis::use_data(AssessmentV61Codebook)
usethis::use_data(AssessmentV61Codebook)
shortened_version <- c("D1", "D2", "D3", "D4", "D6", "C1", "C5", "C6", "ProgTemp", "ConTemp", "MotivationProg1", "MotivationProg2", "MotivationCon1", "MotivationCon2", "CIHS_LIO1", "CIHS_LIO2", "CIHS_LIO3", "CIHS_LIO4", "GrowthMindset", "IssueDisplay", "HowImportantIssue", "IHText", "Preparedness3", "SoughtOutDifferent", "FeedbackAssessment", "GBSS1", "GBSS2", "GBSS3")
AssessmentV61Codebook <- AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
shortened_version <- c("D1", "D2", "D3", "D4", "D6", "C1", "C5", "C6", "ProgTemp", "ConTemp", "MotivationProg1", "MotivationProg2", "MotivationCon1", "MotivationCon2", "CIHS_LIO1", "CIHS_LIO2", "CIHS_LIO3", "CIHS_LIO4", "GrowthMindset", "IssueDisplay", "HowImportantIssue", "IHText", "Preparedness3", "SoughtOutDifferent", "FeedbackAssessment", "GBSS1", "GBSS2", "GBSS3")
AssessmentV61Codebook <- openmindr::AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
shortened_version <- c("D1", "D2", "D3", "D4", "D6", "C1", "C5", "C6", "ProgTemp", "ConTemp", "MotivationProg1", "MotivationProg2", "MotivationCon1", "MotivationCon2", "CIHS_LIO1", "CIHS_LIO2", "CIHS_LIO3", "CIHS_LIO4", "GrowthMindset", "IssueDisplay", "HowImportantIssue", "IHText", "Preparedness3", "SoughtOutDifferent", "FeedbackAssessment", "GBSS1", "GBSS2", "GBSS3")
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
AssessmentV61Codebook
openmindR::AssessmentV6Codebook
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
filter(`Variable Code` %in% shortened_version)
openmindR::AssessmentV6Codebook
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
janitor::clean_names() %>%
filter(`variable_code %in% shortened_version)
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
janitor::clean_names() %>%
filter(variable_code %in% shortened_version)
AssessmentV61Codebook <- openmindR::AssessmentV6Codebook %>%
dplyr::filter(`Variable Code` %in% shortened_version)
usethis::use_data(AssessmentV61Codebook)
devtools::document()
final_list$dat.ass6 <- clean_assessment <- final_list$dat.ass6 %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(minor)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(Opt Out)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not asked yet)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not asked)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not met)"), NA_character_, .x))  %>%
dplyr::select(sort(tidyselect::peek_vars(), decreasing = T)) %>%
dplyr::select(id, OMID, AccessCode, AssessmentVersion, AssessmentsDone,
D1, D2, D3, D4, D5, D6, D7, D8,
everything()) %>%
# select(contains("Trait"))
dplyr::mutate_at(vars(AssessmentVersion,
AssessmentsDone,
D1,
dplyr::contains("Motivation"),
dplyr::contains("GBSS"),
dplyr::contains("CIHS_LIO"),
dplyr::contains("Temp"),
dplyr::contains("C1"),
dplyr::contains("C2"),
dplyr::contains("C3"),
dplyr::contains("C4"),
dplyr::contains("C5"),
dplyr::contains("C6"),
dplyr::contains("HowImportantIssue"),
dplyr::contains("SoughtOutDifferent"),
dplyr::contains("Preparedness"),
dplyr::contains("GrowthMindset"),
dplyr::contains("Trait"),
dplyr::contains("Upset"),
dplyr::contains("HowLeastLikedGroup"),
dplyr::contains("PoliticalTolerance"),
dplyr::contains("IssueQ"),
dplyr::contains("ROV_NE"),
dplyr::contains("TalkToDifferent"),
dplyr::contains("Trait")
), ~as.character(.x) %>% readr::parse_number())
dat.ass6 %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(minor)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(Opt Out)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not asked yet)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not asked)"), NA_character_, .x)) %>%
dplyr::mutate_all(~ifelse(magrittr::equals(.x, "(not met)"), NA_character_, .x))  %>%
dplyr::select(sort(tidyselect::peek_vars(), decreasing = T)) %>%
dplyr::select(id, OMID, AccessCode, AssessmentVersion, AssessmentsDone,
D1, D2, D3, D4, D5, D6, D7, D8,
everything()) %>%
# select(contains("Trait"))
dplyr::mutate_at(vars(AssessmentVersion,
AssessmentsDone,
D1,
dplyr::contains("Motivation"),
dplyr::contains("GBSS"),
dplyr::contains("CIHS_LIO"),
dplyr::contains("Temp"),
dplyr::contains("C1"),
dplyr::contains("C2"),
dplyr::contains("C3"),
dplyr::contains("C4"),
dplyr::contains("C5"),
dplyr::contains("C6"),
dplyr::contains("HowImportantIssue"),
dplyr::contains("SoughtOutDifferent"),
dplyr::contains("Preparedness"),
dplyr::contains("GrowthMindset"),
dplyr::contains("Trait"),
dplyr::contains("Upset"),
dplyr::contains("HowLeastLikedGroup"),
dplyr::contains("PoliticalTolerance"),
dplyr::contains("IssueQ"),
dplyr::contains("ROV_NE"),
dplyr::contains("TalkToDifferent"),
dplyr::contains("Trait")
), ~as.character(.x) %>% readr::parse_number())
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
+
#' A ggplot2 theme
#'
#' This function can be added to a ggplot2 call and creates the official OpenMind ggplot theme
#' @param legend_position Specify Legend position c(x, y)
#' @param axis.text Specify Axis Text size
#' @param axis.title Specify Title Text size
#' @param legend.text.size Specify Legend Text size
#' @param title.size Specify Title Text size
#' @export
theme_om <- function(legend_position = c(.55, .93),
axis_text_size = 20,
axis_title_size = 20,
legend_text_size = 24,
title_size = 26,
overall_text_size = 24, ...){
ggplot2::theme(panel.background = ggplot2::element_rect(fill="white"),
legend.text = ggplot2::element_text(size=legend_text_size),
legend.position = legend_position,
legend.title = ggplot2::element_blank(),
plot.title = ggplot2::element_text(hjust = 0.5, size=title_size),
axis.line.x = ggplot2::element_line(),
axis.line.y = ggplot2::element_line(),
axis.text.x = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.text.y = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.title.x = ggplot2::element_text(color = "grey20", size = axis_title_size),
axis.title.y = ggplot2::element_text(color = "grey20", size = axis_title_size),
text = ggplot2::element_text(family="Poppins",size=24, ...),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed', colour = "grey")
)
}
function(legend_position = c(.55, .93),
axis_text_size = 20,
axis_title_size = 20,
legend_text_size = 24,
title_size = 26,
overall_text_size = 24, ...){
ggplot2::theme(panel.background = ggplot2::element_rect(fill="white"),
legend.text = ggplot2::element_text(size=legend_text_size),
legend.position = legend_position,
legend.title = ggplot2::element_blank(),
plot.title = ggplot2::element_text(hjust = 0.5, size=title_size),
axis.line.x = ggplot2::element_line(),
axis.line.y = ggplot2::element_line(),
axis.text.x = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.text.y = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.title.x = ggplot2::element_text(color = "grey20", size = axis_title_size),
axis.title.y = ggplot2::element_text(color = "grey20", size = axis_title_size),
text = ggplot2::element_text(family="Poppins",size=24, ...),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed', colour = "grey")
)
}
theme_om <- function(legend_position = c(.55, .93),
axis_text_size = 20,
axis_title_size = 20,
legend_text_size = 24,
title_size = 26,
overall_text_size = 24, ...){
ggplot2::theme(panel.background = ggplot2::element_rect(fill="white"),
legend.text = ggplot2::element_text(size=legend_text_size),
legend.position = legend_position,
legend.title = ggplot2::element_blank(),
plot.title = ggplot2::element_text(hjust = 0.5, size=title_size),
axis.line.x = ggplot2::element_line(),
axis.line.y = ggplot2::element_line(),
axis.text.x = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.text.y = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.title.x = ggplot2::element_text(color = "grey20", size = axis_title_size),
axis.title.y = ggplot2::element_text(color = "grey20", size = axis_title_size),
text = ggplot2::element_text(family="Poppins",size=24, ...),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed', colour = "grey")
)
}
#' A ggplot2 theme
#'
#' This function can be added to a ggplot2 call and creates the official OpenMind ggplot theme
#' @param legend_position Specify Legend position c(x, y)
#' @param axis.text Specify Axis Text size
#' @param axis.title Specify Title Text size
#' @param legend.text.size Specify Legend Text size
#' @param title.size Specify Title Text size
#' @export
theme_om <- function(legend_position = c(.55, .93),
axis_text_size = 20,
axis_title_size = 20,
legend_text_size = 24,
title_size = 26,
overall_text_size = 24, ...){
ggplot2::theme(panel.background = ggplot2::element_rect(fill="white"),
legend.text = ggplot2::element_text(size=legend_text_size),
legend.position = legend_position,
legend.title = ggplot2::element_blank(),
plot.title = ggplot2::element_text(hjust = 0.5, size=title_size),
axis.line.x = ggplot2::element_line(),
axis.line.y = ggplot2::element_line(),
axis.text.x = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.text.y = ggplot2::element_text(color = "grey20", size = axis_text_size),
axis.title.x = ggplot2::element_text(color = "grey20", size = axis_title_size),
axis.title.y = ggplot2::element_text(color = "grey20", size = axis_title_size),
text = ggplot2::element_text(family="Poppins",size=24, ...),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed', colour = "grey")
)
}
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
# dat.ass4 <- db_get_data("dat.ass4")
# dat.ass5 <- db_get_data("dat.ass5")
dat.ass <- db_get_data("cleaned_dat")
# Read in data
dat.acc <- db_get_data("dat.acc")
read.csv("../../Research/Data/2019-10-29_assessmentv4.csv") %>%
bind_rows(read.csv("../../Research/Data/2019-10-29_assessmentv5.csv"))
read.csv("../../Research/Data/2019-10-29_assessmentv4.csv") %>%
dplyr::bind_rows(read.csv("../../Research/Data/2019-10-29_assessmentv5.csv"))
