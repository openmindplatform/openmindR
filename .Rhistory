dplyr::mutate(Variant = "All")
}
) %>%
dplyr::rename(Question_txt = Content) %>%
dplyr::mutate(Question_txt = dplyr::case_when(
variable_code == "Q14" ~ "Affective Polarization",
variable_code == "Q15" ~ "Liking for Ingroup",
variable_code == "Q16" ~ "Liking for Outgroup",
variable_code == "Q17" ~ "Ingroup-Outgroup Polarization",
variable_code == "Q18" ~ "Intellectual Humility",
T ~ Question_txt
)) %>%
dplyr::mutate(Outcome = dplyr::case_when(
variable_code == "Q14" ~ 'Affective Polarization Measure',
variable_code == "Q15" ~  'Liking of Ingroup',
variable_code == "Q16" ~  'Liking of Outgroup',
variable_code == "Q17" ~  'Ingroup-Outgroup Polarization Measure',
variable_code == "Q18" ~  'Intellectual Humility Measure',
T ~ Construct
)) %>%
dplyr::select(Outcome, Question_txt, cohend:percentimproved, variable_code,
N, sd, se, ci, Pre, Post, FollowUp, Comparison, moderates, Variant) %>%
tidyr::drop_na(Outcome)
return(basicsummarystats)
}
#' Prepare paired data for plot with within subject error term
#'
#' This function calculates several measures for plotting
#' @param gathered_dat Assessment data as long format
#' @param aversion AssessmentVersion should be one of \code{"V4"}, \code{"V5/V5.1"} or \code{"All"}
#' @export
om_label_stats <- function(gathered_dat, aversion = "All") {
gathered_dat <- gathered_dat  %>%
openmindR::do_if(.data = .,
condition = aversion == "V4",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion == 4)
}
) %>%
openmindR::do_if(.data = .,
condition = aversion == "V5/V5.1",
call = ~{
.x %>%
dplyr::filter(AssessmentVersion >= 5)
}
)
plot_dat <- dplyr::bind_rows(
openmindR::q_strings_seps %>%
purrr::map_dfr(~Rmisc::summarySEwithin(subset(gathered_dat, variable_code == .x),
measurevar = "Response",
withinvars = "Type",
idvar = "OMID", na.rm = T) %>%
dplyr::mutate(variable_code = .x)) %>%
dplyr::mutate(Variant = aversion) ,
openmindR::c_strings_seps %>%
purrr::map_dfr(~Rmisc::summarySEwithin(subset(gathered_dat, variable_code == .x),
measurevar = "Response",
withinvars = "Type",
idvar = "OMID", na.rm = T) %>%
dplyr::mutate(variable_code = .x)) %>%
mutate(Variant = aversion) ,
c("Q15", "Q16", "Q17") %>%
purrr::map_dfr(~Rmisc::summarySEwithin(subset(gathered_dat %>% tidyr::drop_na(ppol_cat), variable_code == .x),
measurevar = "Response",
withinvars = "Type",
idvar = "OMID", na.rm = T) %>%
dplyr::mutate(variable_code = .x)) %>%
dplyr::mutate(Variant = aversion)
)
final_dat <- plot_dat %>% dplyr::as_tibble()
return(final_dat)
}
#' Run mixed effects model
#'
#' This function performs mixed models (Currently only works on Ann Miller experimental data)
#' @param gathered_dat Assessment data as long format
#' @param question Specify question that you want to perform analysis for (ex: \code{"Q18"})
#' @param plot_model logical. Show a coefficient plot of the model. Default is \code{FALSE}
#' @param get_effects logical. Get marginal effects. Default is \code{FALSE}
#' @param get_tidy logical. Get a tidy dataframe with estimates. Also calculates pseudo cohen's d efecct sizes. Default is \code{FALSE}
#' @export
om_mix_models <- function(gathered_dat, question, plot_model = F, get_effects = F, get_tidy = F) {
##todo:this function needs examples in the documentation
## where do we specify what the between subjects variable being tested in the model is?
## for ann miller, it's "condition"... does this function simply look for that variable?
## need to make this more general/robust to other experiments#
# question <- "Q18"
# is.data.frame(mods_dat2)
## some data wrangling
mods_dat <- gathered_dat %>%
dplyr::filter(variable_code == question) %>%
dplyr::filter(Type %in% c("Pre", "Post")) %>%
dplyr::mutate(Condition = as.factor(Condition)) %>%
dplyr::mutate(Type = as.factor(Type)) %>%
dplyr::mutate(OMID = as.factor(OMID)) %>%
tidyr::drop_na(Response) %>%
dplyr::add_count(OMID) %>%
dplyr::filter(n == 2) %>%
dplyr::mutate(Type = forcats::fct_relevel(Type, c("Pre", "Post"))) %>%
base::as.data.frame()
## Assign to a symbol that's unlikely to be in use in .GlobalEnv
## (and make sure this function cleans up after itself!)
assign(".TeMpVaR", mods_dat, envir = globalenv())
on.exit(rm(.TeMpVaR, envir = globalenv()))
## getting unique IDs we will need this for calculating pseudo cohens d
individs <- mods_dat %>% dplyr::distinct(OMID) %>% nrow
## Run model
lme_dat <- lme4::lmer(Response ~ Condition*Type +(1+Condition|OMID) + (1+Type|OMID),
data = .TeMpVaR, REML = F,
control = lme4::lmerControl(check.nobs.vs.nRE = "ignore"))
final <- list(lme_dat = lme_dat)
if (plot_model) {
## get coefficient plot for model
ggmod <- lme_dat %>%
sjPlot::plot_model(type = "std", show.p = T, show.values = T)# +
# ggplot2::theme_minimal()
final <- rlist::list.append(final, ggmod = ggmod)
}
if (get_effects) {
### This tells R to give the AP estimate at levels of Time and Ideology that we
### specify. In this example we want an estimate of AP for each level of time
### (Pre, Post, Follow-up) plotted at 1 sd below (liberal) and above
### (conservative) the midpoint (4) for ideology. It uses the info from mod1
### above to adjust for the within subjects variance we're throwing out.
effects_dat <- ggeffects::ggeffect(lme_dat, c("Condition", "Type" ),
x.as.factor = T,
ci.lvl = .95,
typical = "mean") %>%
### Now we turn both of these into factors to make plots easier (i.e. add labels
### and make sure time is in the right order, not graphed alphabetically)
openmindR::do_if(.data = .,
condition = "Article" %in% unique(mods_dat$Condition),
call = ~{.x %>% dplyr::mutate(Condition = factor(x,  levels = c("Article","OpenMind")))}
) %>%
openmindR::do_if(.data = .,
condition = "Delayed Treatment" %in% unique(mods_dat$Condition),
call = ~{.x %>% dplyr::mutate(Condition = factor(x,  levels = c("Experimental Treatment", "Delayed Treatment")))}
) %>%
dplyr::mutate(Type = factor(group, levels = c("Pre", "Post")))
final <- rlist::list.append(final, effects_dat = effects_dat)
}
if (get_tidy) {
## get tidy dataframe
coefs <- broom::tidy(lme_dat) %>%
dplyr::filter(group == "fixed") %>%
dplyr::mutate(n_coef = nrow(.)) %>%
dplyr::mutate(n_dat = individs) %>%
## calculate pseudo cohens d
# todo: add note in output that it is a pseudo-d
dplyr::mutate(d = abs(estimate/(sqrt(n_dat - n_coef)*std.error)))
final <- rlist::list.append(final, tidy_dat = coefs)
}
return(final)
}
#' Plot mixed effects model
#'
#' This function plots the results of mixed models (Currently only works on Ann Miller experimental data)
#' @param effects_dat \code{effects_dat} is a dataset produced by \code{\link{om_mix_models}} and supplies the marginal effects of the model
#' @param tidy_dat \code{tidy_dat} is a dataset produced by \code{\link{om_mix_models}} and supplies the pseudo cohen's d for plotting
#' @param var_label supply a character that is plotted as title and y-axis
#' @param show_stats Show statistics on the bottom right. Only possible if you supply \code{tidy_dat}
#' @export
om_mix_plot <- function(effects_dat, tidy_dat = NULL, var_label, show_stats = T) {
### Here's a pretty graph of effects by time period with the proper within subjects error bars/estimates
# effects_dat <- gm.s$effects_dat
# tidy_dat <- gm.s$tidy_dat
# var_label <- "Intellctual Humility"
ggmod <-
effects_dat %>%
ggplot2::ggplot(ggplot2::aes(x = Type, y = predicted, fill = Condition))+
ggplot2::geom_bar(position = ggplot2::position_dodge(),
stat = "identity",
colour = "black", # Use black outlines,
size = .3,show.legend=TRUE) +      # Thinner lines
ggplot2::geom_errorbar(ggplot2::aes(ymin = predicted - std.error, ymax = predicted + std.error),
size=.7,    # Thinner lines
width=.2,
position=ggplot2::position_dodge(.9)) +
ggplot2::scale_fill_manual("Condition", values = c("#3d4fa1", "#65c6c3")) +
ggplot2::ylab(var_label)+
ggplot2::xlab("Time Point") +
ggplot2::coord_cartesian(ylim=c(0, 1))+
ggplot2::ggtitle(var_label) +
ggplot2::scale_y_continuous(expand = c(0, 0),limits = c(0,1)) +
ggplot2::theme(panel.background = ggplot2::element_rect(fill="white"),
text = ggplot2::element_text(family="Poppins",size=20),
legend.text = ggplot2::element_text(size=12),
legend.position = c(.08, .81),
#legend.title=element_blank(),
plot.title = ggplot2::element_text(hjust = 0.5,size=28),
axis.line.x = ggplot2::element_line(),
axis.text.x = ggplot2::element_text(hjust=0.5,size=24),
axis.title.x = ggplot2::element_text(hjust=0.5, size=24),
axis.line.y = ggplot2::element_line(),
axis.text.y = ggplot2::element_text(hjust=0.5,size=24),
axis.title.y = ggplot2::element_text(hjust=0.5, size=24),
legend.margin = ggplot2::margin(0, 0, 0, 0))
if (show_stats) {
label_dat <- tidy_dat %>%
dplyr::select(-group) %>%
dplyr::mutate_at(dplyr::vars(estimate, std.error, d), ~openmindR::specify_decimal(.x, 3)) %>%
#todo: add subscript p to d because it is a pseudo-d, not actual d
dplyr::mutate(cite_stats = stringr::str_glue("B = {estimate}, SE = {std.error}, d = {d}")) %>%
openmindR::do_if(.data = .,
condition = "ConditionExperimental Treatment" %in% unique(tidy_dat$term),
call = ~{.x %>%
dplyr::mutate(label = dplyr::case_when(
term == "(Intercept)" ~ stringr::str_glue("N = {n_dat}\n\n"),
term == "ConditionExperimental Treatment" ~ stringr::str_glue("Experimental v. Delayed: {cite_stats}\n\n"),
term == "TypePost" ~ stringr::str_glue("Pre v. Post: {cite_stats}\n\n"),
term == "ConditionExperimental Treatment:TypePost" ~ stringr::str_glue("Condition X Time: {cite_stats}")
)
)}
) %>%
openmindR::do_if(.data = .,
condition = "ConditionOpenMind" %in% unique(tidy_dat$term),
call = ~{.x %>%
dplyr::mutate(label = dplyr::case_when(
term == "(Intercept)" ~ stringr::str_glue("N = {n_dat}\n\n"),
term == "ConditionOpenMind" ~ stringr::str_glue("Article v. OpenMind: {cite_stats}\n\n"),
term == "TypePost" ~ stringr::str_glue("Pre v. Post: {cite_stats}\n\n"),
term == "ConditionOpenMind:TypePost	" ~ stringr::str_glue("Condition X Time: {cite_stats}")
)
)}
) %>%
dplyr::pull(label) %>% glue::glue_collapse() %>% as.character()
ggmod <- ggmod +
ggplot2::labs(caption = label_dat) +
ggplot2::theme(plot.caption = ggplot2::element_text(family = "Poppins", size = 14, colour = "#756f71"))
}
return(ggmod)
}
#' Run and plot mixed effects model
#'
#' This function allows to run and plot a mixed model. It makes use of both \code{\link{om_mix_models}} and \code{\link{om_mix_plot}} (currently only works on Ann Miller experimental data)
#' @param experiment Specify a dataset with experimental data
#' @param title specify a title and y-label for the plot
#' @export
om_mix_complete <- function(experiment, title) {
#todo: would be nice to be able to specify ALL, some, or just one of the outcome variables
# question <- "Q11"
question <- dplyr::case_when(
title == "Growth Mindset" ~ "Q11",
title == "Intellectual Humility" ~ "Q18",
title == "Affective Polarization" ~ "Q14",
title == "Social Closeness" ~ "Q10",
title == "Perspective-Taking" ~ "Q4"
)
gg_dat <- openmindR::om_mix_models(experiment,
question = question,
plot_model = F,
get_effects = T,
get_tidy = T)
openmindR::om_mix_plot(gg_dat$effects_dat, gg_dat$tidy_dat, title)
}
basicsummarystats <- openmindR::db_get_data(tbl_dat = "basicsummarystats", path = "../om_metrics_report/sql_data/omdata.db")
basicsummarystats
library(openmindR)
library(tidyverse)
assessmentv5_codebook
basicsummarystats
basicsummarystats %>%
select(Construct = Outcome, Mapping = variable_code)
basicsummarystats %>%
filter(Variant == "V5/V5.1")
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18"))
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code)
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code)
assessmentv5_codebook
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score")
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, "Measure"))
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure"))
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure")) %>%
bind_rows(assessmentv5_codebook)
basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure")) %>%
bind_rows(assessmentv5_codebook, .)
assessmentv5_codebook <-basicsummarystats %>%
filter(Variant == "V5/V5.1") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure")) %>%
bind_rows(assessmentv5_codebook, .)
usethis::use_data(assessmentv5_codebook)
usethis::use_data(assessmentv5_codebook, overwrite = T)
basicsummarystats %>%
filter(Variant == "V4") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure")) %>%
bind_rows(assessmentv4_codebook, .)
basicsummarystats %>%
filter(Variant == "V4") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure"))
assessmentv4_codebook <-basicsummarystats %>%
filter(Variant == "V4") %>%
filter(variable_code %in% c("Q14", "Q15", "Q16", "Q17", "Q18")) %>%
distinct(variable_code, .keep_all = T) %>%
select(Construct = Outcome, Mapping = variable_code, Content = Question_txt) %>%
mutate(Coding = "Composite Score") %>%
mutate(Construct = str_remove_all(Construct, " Measure")) %>%
bind_rows(assessmentv4_codebook, .)
usethis::use_data(assessmentv4_codebook, overwrite = T)
devtools::document()
devtools::document()
devtools::load_all()
openmindR::assessmentv5_codebook
openmindR::assessmentv5_codebook %>% view()
devtools::load_all()
openmindR::assessmentv5_codebook
openmindR::assessmentv5_codebook %>%
knitr::kable()
knitr::opts_chunk$set(messages = F, warning = F)
openmindR::assessmentv5_codebook %>%
select(Q1:Q11, Q14, Q15, Q16, Q17, Q18)
openmindR::assessmentv5_codebook
openmindR::assessmentv5_codebook %>%
arrange(Mapping)
openmindR::assessmentv5_codebook %>%
knitr::kable()
devtools::document()
library(openmindR)
openmindR::assessmentv4_codebook
openmindR::assessmentv5_codebook
openmindR::assessmentv5_codebook %>% View()
library(tidyverse)
openmindR::assessmentv5_codebook %>% View()
If I'm sure I'm right about something, I don't waste much time listening to other people's arguments.
openmindR::assessmentv4_codebook %>% View()
When I am really confident in a belief, there is very little chance that belief is wrong.
If I'm sure I'm right about something, I don't waste much time listening to other people's arguments.
devtools::document()
openmindR::assessmentv4_codebook %>% View()
openmindR::assessmentv4_codebook$Content
openmindR::assessmentv5_codebook$Content
openmindR::assessmentv5_codebook %>% View()
knitr::opts_chunk$set(echo = TRUE, message = F, error = F, warning = F)
# devtools::install_github("GuangchuangYu/hexSticker")
library(hexSticker)
imgurl <- "https://i.imgur.com/0iHYOEu.png"
sticker(imgurl,
package="",
p_size=0.1,
s_x=0.975,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
url = "facebook.com/rmemes0\t\t\t\ttwitter.com/rstatsmemes",
u_size = 9,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=0.975,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
url = "facebook.com/rmemes0\t\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=0.975,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=0.975,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=1,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=1,
s_y=1.065,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=1,
s_y=1.065,
s_width=.75,
asp = 0.95,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=1,
s_y=1.065,
s_width=.74,
asp = 0.925,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
sticker(imgurl,
package="",
p_size=0.01,
s_x=1,
s_y=1.075,
s_width=.75,
asp = 0.9,
h_color = "black",
h_fill = "white",
filename="rstatsmemes_hexagon.png",
# url = "facebook.com/rmemes0\t\t\ttwitter.com/rstatsmemes",
u_size = 12,
u_y = 0.05,
dpi = 900)
